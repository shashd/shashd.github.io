<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1105z&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-31T07:20:35.270Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>1105z</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式架构演变</title>
    <link href="http://yoursite.com/2020/07/31/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98/"/>
    <id>http://yoursite.com/2020/07/31/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98/</id>
    <published>2020-07-31T06:48:17.000Z</published>
    <updated>2020-07-31T07:20:35.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式架构演变"><a href="#分布式架构演变" class="headerlink" title="分布式架构演变"></a>分布式架构演变</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>是建立在网络上的软件系统</li><li>一组独立的计算机展现给用户的是一个统一的整体，就好像是一个系统一样</li><li>分布式架构的应用<ul><li>分布式文件系统<ul><li>Hadoop:HDFS，Google的GFS，淘宝的TFS</li></ul></li><li>分布式缓存系统<ul><li>memcache，hbase，mongdb</li></ul></li><li>分布式数据库<ul><li>MySQL，Mariadb，PostgreSQL </li></ul></li><li>分布式WebService</li><li>分布式计算</li></ul></li></ul><h3 id="演进过程"><a href="#演进过程" class="headerlink" title="演进过程"></a>演进过程</h3><ul><li>关注点<ul><li>数据量提升</li><li>访问量提升</li><li>网站结构变化</li></ul></li></ul><h4 id="阶段1——单应用结构"><a href="#阶段1——单应用结构" class="headerlink" title="阶段1——单应用结构"></a>阶段1——单应用结构</h4><ul><li><p>所有程序和应用都部署在一个机器上</p><img src="https://i.loli.net/2020/07/31/tZc8iHSqN49FbEy.png" alt="a6868517-4d99-4e56-b292-95ce425d2b6f-1033611.jpg" style="zoom:33%;" /></li></ul><h4 id="阶段2——应用服务器和数据库服务器分离"><a href="#阶段2——应用服务器和数据库服务器分离" class="headerlink" title="阶段2——应用服务器和数据库服务器分离"></a>阶段2——应用服务器和数据库服务器分离</h4><img src="https://i.loli.net/2020/07/31/nlskur6DjNUZyYA.png" alt="4d8d9040-7445-43a3-96e8-8a9cde27f066-1033611.jpg" style="zoom:33%;" /><ul><li>访问量逐步上升，服务器负载慢慢提高</li><li>增加机器<ul><li>将web服务器和数据库服务器拆分</li></ul></li></ul><h4 id="阶段3——应用服务器集群"><a href="#阶段3——应用服务器集群" class="headerlink" title="阶段3——应用服务器集群"></a>阶段3——应用服务器集群</h4><img src="https://i.loli.net/2020/07/31/fUO1bw4V3olhCnx.png" alt="e493c855-1fb7-4c6e-9a22-4e01eeb85f11-1033611.jpg" style="zoom:33%;" /><ul><li><p>访问量上升到单个应用服务器无法满足需求</p></li><li><p>增加应用服务器集群化</p><ul><li>可以分流用户请求</li><li>服务器之间无直接交互，依赖数据库对外提供服务</li></ul></li><li><p>这个阶段以来，问题慢慢出现</p><ul><li>谁来负载均衡<ul><li>用户的请求由谁来转发到及具体的应用服务器上</li></ul></li><li>如何维护session，达到session共享说的目的</li></ul></li><li><p>此时的系统架构又会变化城如下方式</p><img src="https://i.loli.net/2020/07/31/8MDYOAx2s1Rchkg.png" alt="c8093644-19f7-47fa-9857-6de196a8d725-1033611.jpg" style="zoom:33%;" /><ul><li>其中负载均衡<ul><li>软负载</li><li>硬负载</li></ul></li></ul></li></ul><h4 id="阶段4——数据库压力变大，数据库读写分离"><a href="#阶段4——数据库压力变大，数据库读写分离" class="headerlink" title="阶段4——数据库压力变大，数据库读写分离"></a>阶段4——数据库压力变大，数据库读写分离</h4><img src="https://i.loli.net/2020/07/31/WULjuaiAThy2edO.png" alt="0ac9e18b-c1f3-4408-bb06-587b031f6e95-1033611.jpg" style="zoom:33%;" /><ul><li>虽然应用服务器的性能提升了，但是数据库的负载变大</li></ul><h5 id="方案1——增加机器"><a href="#方案1——增加机器" class="headerlink" title="方案1——增加机器"></a>方案1——增加机器</h5><ul><li>将数据库一分为2，分别负载到两个数据库服务器上</li><li>但是会导致数据库数据不统一</li><li>故而不可行</li></ul><h5 id="方案2——读写分离"><a href="#方案2——读写分离" class="headerlink" title="方案2——读写分离"></a>方案2——读写分离</h5><img src="https://i.loli.net/2020/07/31/WULjuaiAThy2edO.png" alt="0ac9e18b-c1f3-4408-bb06-587b031f6e95-1033611.jpg" style="zoom:33%;" /><ul><li>带来问题：<ul><li>主从数据库之间的数据需要同步</li><li>应用中需要根据业务进行对应数据源的选择</li></ul></li></ul><h4 id="阶段5——使用搜索缓解读库的压力"><a href="#阶段5——使用搜索缓解读库的压力" class="headerlink" title="阶段5——使用搜索缓解读库的压力"></a>阶段5——使用搜索缓解读库的压力</h4><img src="https://i.loli.net/2020/07/31/x8BvOwLYEZFeKUf.png" alt="d5ced820-ac01-4ce9-934b-a723db48aeb6-1033611.jpg" style="zoom:33%;" /><ul><li>数据库对查找的效率并不高，引入搜索殷勤</li></ul><h4 id="阶段6——引入缓存机制缓解数据库的压力"><a href="#阶段6——引入缓存机制缓解数据库的压力" class="headerlink" title="阶段6——引入缓存机制缓解数据库的压力"></a>阶段6——引入缓存机制缓解数据库的压力</h4><ul><li><p>对于热点数据没必要每次从数据库中读取</p></li><li><p>使用缓存技术，如redis、memcache作为应用层的缓存</p></li><li><p>某些场景对用户的ip访问频率做限制</p><ul><li>不适合放内存和数据库中</li><li>可以使用nosql的方式替代传统的关系型数据库</li></ul><img src="https://i.loli.net/2020/07/31/SWTf285iMALaQUq.png" alt="bfd5810a-0082-482a-9435-cbe27be42cd2-1033611.jpg" style="zoom:33%;" /></li></ul><h4 id="阶段7——数据库的水平-垂直拆分"><a href="#阶段7——数据库的水平-垂直拆分" class="headerlink" title="阶段7——数据库的水平/垂直拆分"></a>阶段7——数据库的水平/垂直拆分</h4><ul><li><p>数据库的瓶颈还是问题</p><ul><li><p>对数据进行垂直拆分和水平拆分</p><img src="https://i.loli.net/2020/07/31/VzFpqeQrmvUI5sw.png" alt="0333779b-4519-4e6a-ba0c-bd7befc764d7-1033611.jpg" style="zoom:33%;" /></li></ul></li><li><p>垂直拆分</p><ul><li>把数据库中不同业务数据拆分到不同的数据库</li></ul></li><li><p>水平拆分</p><ul><li>把同一个表中的数据拆分到两个甚至更多的数据库中，水平拆分的原因是某些业务数据量已经达到了单个数据库的瓶颈，这时可以采取将表拆分到多个数据库中</li></ul></li></ul><h4 id="阶段8——应用的拆分"><a href="#阶段8——应用的拆分" class="headerlink" title="阶段8——应用的拆分"></a>阶段8——应用的拆分</h4><ul><li><p>单个的应用的压力太大，拆分成多个子系统</p><img src="https://i.loli.net/2020/07/31/XiTyHeSnLVvm4uc.png" alt="3e20e10a-125b-4754-98b6-1dc3352dbcac-1033611.jpg" style="zoom:33%;" /></li><li><p>但是之后可能会有相同的代码，所以导致每个系统都会有用户查询访问相关操作这些相同的操作一定是要抽象出来，否则就是一个坑。所以通过走服务化路线的方式来解决。</p></li><li><p>服务拆分</p><img src="https://i.loli.net/2020/07/31/LvRK8gU7trbZaMh.png" alt="63fd89ab-692e-4742-b9cf-2aa958c7fec2-1033611.jpg" style="zoom:33%;" /><ul><li>然后各个服务之间的通信可以通过RPC方式达成</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分布式架构演变&quot;&gt;&lt;a href=&quot;#分布式架构演变&quot; class=&quot;headerlink&quot; title=&quot;分布式架构演变&quot;&gt;&lt;/a&gt;分布式架构演变&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简
      
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="distributed system" scheme="http://yoursite.com/tags/distributed-system/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程之一:线程基础</title>
    <link href="http://yoursite.com/2020/07/30/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%B8%80-%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/07/30/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%B8%80-%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2020-07-30T02:31:27.000Z</published>
    <updated>2020-08-01T03:11:46.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java并发编程之一：线程基础"><a href="#Java并发编程之一：线程基础" class="headerlink" title="Java并发编程之一：线程基础"></a>Java并发编程之一：线程基础</h2><h3 id="并发简史和基础概念"><a href="#并发简史和基础概念" class="headerlink" title="并发简史和基础概念"></a>并发简史和基础概念</h3><p>​        在早期，计算机不包含操作系统，单个计算机只能从头到尾执行一个程序，并且该程序能够访问到计算中所有的资源，即使是之后出现的批处理操作系统，<strong>本质上还是串行地执行程序，内存中始终只有一个程序正在执行</strong>。在这种环境中，编写和执行程序非常麻烦并且效率比较低下，对于计算机资源的浪费惊人。在此情况下，操作系统被开发出，从而使得一次性执行多个计算机程序成为现实。</p><p>​        计算机中每个独立执行的程序都是一个进程，也可以理解为<strong>CPU工作时间段的集合描述</strong>。<strong>进程是资源分配的最小单位</strong>，不同进程之间的数据很难共享数据（但可以做到），进程之间不会互相影响，CPU使用<strong>时间片轮转</strong>的方式运行进程。CPU时间片分配给其他进程的行为叫做上下文切换，进程上下文切换的耗损大。</p><p>​        线程因为人们不满于进程只能逐步执行进程的子任务而提出的。线程是计算机最基础的调度单位，又被称为<strong>轻量级进程</strong>。一个线程可以包含多个线程，线程共享进程的<strong>内存地址空间</strong>，每个线程中都有程序计算器等结构。多线程在使用的时候需要制定一套同步协调机制，以防出现一个线程在针对共享的内存地址空间进行数据的操作时候，出现另一个线程对数据修改、删除的情况的<strong>安全性问题</strong>。</p><p>​        线程和进程的区别本质在于是否单独占有内存地址空间和其他系统资源（如I/O）:</p><ul><li>进程是资源分配的最小单位，线程是CPU调度的最小单位；</li><li>进程单独占有一定的内存地址空间，所以进程间存在内存隔离，数据是分开的，数据共享复杂但是同步简单，各个进程之间互不干扰；而线程共享所属进程占有的内存地址空间和资源，数据共享简单，但是同步复杂。</li><li>进程的上下文切换的<strong>开销</strong>高，线程的上下文切换开销低。进程单独占有一定的内存地址空间，进程的创建和销毁不仅需要保存寄存器和栈信息，还需要资源的分配回收以及页调度，开销较大；线程只需要保存寄存器和栈信息，开销较小。</li><li>进程单独占有一定的内存地址空间，一个进程出现问题不会影响其他进程，不影响主程序的稳定性，可靠性高；一个线程崩溃可能影响整个程序的稳定性，可靠性较低。</li></ul><blockquote><p>进程让操作系统的并发性成为了可能，而线程让进程的内部并发成为了可能。</p></blockquote><blockquote><p>CPU通过时间片分配算法来循环执行子任务，上下文切换通常是计算多个子任务的，此操作会<strong>消耗大量的 CPU 时间</strong>，所以线程数量也并不是越多越好。频繁的创建和销毁线程也是系统的巨大开销。</p></blockquote><hr><h3 id="线程结构"><a href="#线程结构" class="headerlink" title="线程结构"></a>线程结构</h3><hr><h3 id="实现线程的方式"><a href="#实现线程的方式" class="headerlink" title="实现线程的方式"></a>实现线程的方式</h3><h4 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Runnable接口定义</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用Runnable接口的方式实现线程的创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> RunnableThread.start();</span><br><span class="line">    <span class="comment">// Java 函数式编程，可以省略RunnableThread类</span></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"Java 8 匿名内部类"</span>);</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过Runnable接口重写run()方法，将实例传送到Thread类中就可以直接实现多线程。</p><h4 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h4><p>调用start()方法后，线程才会启动，轮到CPU时间片的时候再调用run()方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用继承Thread方法实现线程的创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">   Thread ExtendThread = <span class="keyword">new</span> ExtendThread();</span><br><span class="line">    ExtendThread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单继承Thread类并且重写类中的run()方法。</p><p><strong>Thread类的构造方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Thread类源码</span></span><br><span class="line"><span class="comment">//init方法</span></span><br><span class="line"><span class="comment">//g:线程组，指定线程在哪个线程组下, target:执行的任务, name:线程名称，多个线程的名字是可以重复的, acc:用于初始化私有变量inheritedAccessControlContext, inheritThreadLocals为可继的的ThreadLoal</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ThreadGroup g, Runnable target, String name, </span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">long</span> stackSize, AccessControlContext acc, </span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">boolean</span> inheritThreadLocals)</span></span></span><br><span class="line"><span class="function"><span class="comment">//构造函数调用init方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(Runnable target)</span></span>&#123;</span><br><span class="line">init(<span class="keyword">null</span>, target, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用在init方法里初始化AccessControlContext类型的私有属性</span></span><br><span class="line"><span class="keyword">this</span>.inheritedAccessControlContext = </span><br><span class="line">    acc != <span class="keyword">null</span> ? acc : AccessController.getContext();</span><br><span class="line"><span class="comment">//两个对用于支持ThreadLocal的私有属性</span></span><br><span class="line">ThreadLocal.ThreadLocalMap threadlocals = <span class="keyword">null</span>;</span><br><span class="line">ThreadLocal.ThreadLocalMap inheritableThreadLocals = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//实际上大部分情况下直接调用的构造函数</span></span><br><span class="line">Thread(Runnable target);</span><br><span class="line">Thread(Runnable target, String name);</span><br></pre></td></tr></table></figure><p><strong>Thread类的几个常用方法</strong></p><ul><li>currentThread()，返回正在执行对象的引用。</li><li>start()，开始执行线程，java虚拟机调用其中重写的run()方法。</li><li>yield()，让出当前线程对处理器的占用。</li><li>sleep()，线程休眠一段指定的时间。</li><li>join()，当前线程等待另外一个线程执行完成之后再继续执行。</li></ul><p><strong>Thread类和Runnable接口的比较</strong></p><ul><li><p>类单继承，接口多实现。</p></li><li><p>接口降低线程对象和线程任务的耦合性。</p></li><li><p>如果使用线程的时候不需要使用Thread类中的其他方法，接口更显得轻量级。</p></li><li><p>线程池创建线程</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造方法</span></span><br><span class="line">    DefaultThreadFactory()&#123;</span><br><span class="line">        SecurityManager s = System.getSecurityManager();</span><br><span class="line">        group = (s != <span class="keyword">null</span>)?s.getThreadGroup(): <span class="comment">// 获取线程组</span></span><br><span class="line">            Thread.currentThread().getThreadGroup();</span><br><span class="line">        namePrefix = <span class="string">"pool-"</span> +</span><br><span class="line">                poolNumber.getAndIncrement() +</span><br><span class="line">                <span class="string">"-thread"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本质还是通过Thread来创建的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span></span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(group,r,namePrefix+threadNumber.getAndIncrement(),<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(t.isDaemon())</span><br><span class="line">            t.setDarmon(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(t.getPriority()!=Thread.NORM_PROORITY)</span><br><span class="line">            t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Callable创建线程"><a href="#Callable创建线程" class="headerlink" title="Callable创建线程"></a>Callable创建线程</h4><p>与Runnable类似，但是提供的方法有返回值。一般配合线程池工具ExecutorService来使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Callable接口定义</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallableTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自建函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//提交任务，用Future提交返回线程执行后的结果</span></span><br><span class="line">        Future&lt;Integer&gt; future = service.submit(<span class="keyword">new</span> CallableTask());</span><br><span class="line">    <span class="comment">//调用get方法会阻塞当前线程，直接得到结果</span></span><br><span class="line">        <span class="comment">//故而实际编码中可以设置超时时间的重载get方法</span></span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FutureTask类创建线程"><a href="#FutureTask类创建线程" class="headerlink" title="FutureTask类创建线程"></a>FutureTask类创建线程</h4><p><strong>Future接口的方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 尝试取消一个线程的执行（但不一定能执行成功）,参数代表是否要中断方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> paramBoolean)</span></span>;</span><br><span class="line">    <span class="comment">// 查看线程是否被取消</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 查看任务是否完成</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 等待任务执行结束，然后获得V类型的结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">    <span class="comment">// 同上，多了等待时间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> V <span class="title">get</span><span class="params">(<span class="keyword">long</span> paramLong, TimeUnit paramTimeUnit)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>FutureTask类</strong></p><p>FutureTask类实现<code>RunnableFuture</code>接口，<code>RunnableFuture</code>接口又继承了<code>Runnable</code>接口和<code>Future</code>接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用创建线程</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line">FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> Task());</span><br><span class="line">        executor.submit(futureTask);</span><br><span class="line">        System.out.println(futureTask.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区别：</p><ul><li><p>调用<code>submit</code>方法是没有返回值的。这里实际上是调用的<code>submit(Runnable task)</code>方法，而上面的Demo，调用的是<code>submit(Callable&lt;T&gt; task)</code>方法；</p></li><li><p>这里是使用<code>FutureTask</code>直接取<code>get</code>取值，而上面的Demo是通过<code>submit</code>方法返回的<code>Future</code>去取值。</p></li></ul><blockquote><p>在很多高并发的环境下，有可能Callable和FutureTask会创建多次。FutureTask能够在高并发环境下<strong>确保任务只执行一次</strong>。这块有兴趣的同学可以参看FutureTask源码。</p></blockquote><p><strong>FutureTask的几个状态</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * state可能的状态转变路径如下：</span></span><br><span class="line"><span class="comment">  * NEW -&gt; COMPLETING -&gt; NORMAL</span></span><br><span class="line"><span class="comment">  * NEW -&gt; COMPLETING -&gt; EXCEPTIONAL</span></span><br><span class="line"><span class="comment">  * NEW -&gt; CANCELLED</span></span><br><span class="line"><span class="comment">  * NEW -&gt; INTERRUPTING -&gt; INTERRUPTED</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NEW          = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COMPLETING   = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NORMAL       = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXCEPTIONAL  = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED    = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTING = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTED  = <span class="number">6</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="线程状态以及转换"><a href="#线程状态以及转换" class="headerlink" title="线程状态以及转换"></a>线程状态以及转换</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如Thread.State源码中所声明的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State&#123;</span><br><span class="line">    NEW,</span><br><span class="line">    RUNNABLE,</span><br><span class="line">    BLOCKED,</span><br><span class="line">    WAITING,</span><br><span class="line">    TIMED_WAITING,</span><br><span class="line">    TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程生命周期中一共有六种状态：</p><h4 id="New（新建）"><a href="#New（新建）" class="headerlink" title="New（新建）"></a>New（新建）</h4><p>​    表示线程被创建但是尚未启动的状态，使用new Thread创建一个线程的时候，如果线程没有开始运行<code>start</code>方法，也就没有运行<code>run</code>方法，那么此时的状态就是<code>New</code>。只有运行start方法后才进入到<code>Runnable</code>的状态。不可能在不进入到<code>Runnable</code>状态的前提下就进入到<code>Blocked</code>状态。</p><p>​    引申问题：</p><ul><li>是否可以反复调用一个线程的start方法？</li></ul><ul><li><p>加入一个线程执行完毕，（此时处于TERMINATED状态），再次调用这个线程的start()方法是否可行？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//START的源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)<span class="comment">// 不等于0直接抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">    group.add(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        start0();<span class="comment">// 方法中没有对threadStatus的处理</span></span><br><span class="line">        started = <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!started)&#123;</span><br><span class="line">                group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Throwable ignore)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStartMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;&#125;);</span><br><span class="line">thread.start();<span class="comment">//第一次调用threadStatus结果为0</span></span><br><span class="line">thread.start();<span class="comment">//第二次调用threadStatus结果不为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以得到结果，两个问题的答案都是不可行，在调用一次start()之后，threadStatus的值会改变，此时再次调用start()方法会抛出IllegalThreadStateException异常。</p></li></ul><h4 id="Runnable（可运行）"><a href="#Runnable（可运行）" class="headerlink" title="Runnable（可运行）"></a>Runnable（可运行）</h4><p>​    对应操作系统线程状态中的两个情况，分别是<code>Ready</code>和<code>Running</code>，区别在于是否被分配了CPU资源。所以假如一个线程执行到一半的时候，CPU资源被分配到其他的任务，导致当前线程暂时不运行，但是状态依旧是<code>Runnable</code>，仍然可能等待重新恢复执行。</p><h4 id="Blocked（阻塞）"><a href="#Blocked（阻塞）" class="headerlink" title="Blocked（阻塞）"></a>Blocked（阻塞）</h4><p>​    <code>Runnable</code> -&gt; <code>Blocked</code> 的原因就是没有争夺到<code>monitor</code>锁，<code>Blocked</code> -&gt; <code>Runnable</code> 的原因是因为拿到了<code>monitor</code>锁，从而进入到<code>Runnable</code>状态。</p><h4 id="Waiting（等待）"><a href="#Waiting（等待）" class="headerlink" title="Waiting（等待）"></a>Waiting（等待）</h4><p>​    有三种方法可以导致线程进入到waiting状态：</p><ul><li>Object.wait()方法：使当前的线程处于等待状态直到另外一个线程唤醒，调用wait()方法钱线程必须持有对象的锁</li><li>Thread.join()方法：当代线程执行完成，底层调用的是Object实例的wait方法</li><li>LockSupport.park()方法：如ReentrantLock，如果线程没有获取到该锁的时候就会进入到waiting状态</li></ul><blockquote><p>只有被执行<code>LockSupport.unpark()</code>方法或者是等待join的线程执行结束或者中断才可以进入到Runnable状态。其他线程如果使用<code>notify()/notifyAll()</code>唤醒会直接进入到<code>Blocked</code>状态，因为执行<code>notify()/notifyAll()</code>的前提是持有<code>monitor</code>锁，直接执行唤醒的线程结束并释放锁后，拿到锁才会进入到<code>Runnable</code>状态。</p></blockquote><blockquote><p>需要注意的是调用<code>notify()</code>方法指挥唤醒单个等待锁的线程，如果有多个线程都在等待的话并不一定能唤醒到之前调用<code>wait()</code>方法的线程。调用<code>notifyAll()</code>唤醒所有等待锁的线程之后，也不一定会把时间片马上分配给刚才放弃锁的那个线程，具体看系统的调度。</p></blockquote><blockquote><p><code>join</code>方法执行中不会释放锁，会一直等待当前线程执行完毕（转换为<code>Terminated</code>状态）</p></blockquote><h4 id="Timed-Waiting（计时等待）"><a href="#Timed-Waiting（计时等待）" class="headerlink" title="Timed Waiting（计时等待）"></a>Timed Waiting（计时等待）</h4><p>该状态会等待超时，到达时间后会被系统自动唤醒。</p><p>下面的方法会导致线程进入Timed Waiting状态：</p><ul><li>Thread.sleep(long millis)方法：睡眠指定时间</li><li>Object.wait(long timeout)方法：休眠指定时间，期间可以通过notify()/notifyAll()唤醒</li><li>Thread.join(long millis)方法：：等待当前线程最多执行millis毫秒，如果millis为0，则会一直执行</li><li>LockSupport.parkNanos(long nanos)方法：除非获得调用许可，否则禁用当前线程进行线程调度指定时间</li><li>LockSupportUntil(longdeadline)方法：同上，也是禁止线程进行调度指定时间；</li></ul><blockquote><p>执行<code>notify()/notifyAll()</code>也是和<code>Waiting</code>状态相同道理，先进入<code>Blocked</code>状态，然后拿到锁进入到<code>Runnable</code>状态。其他情况下，如超时时间到了而且能直接获取锁/join线程结束/被中断/调用了<code>LockSupport.unpark()</code>都可以直接恢复到<code>Runnable</code>状态。</p></blockquote><h4 id="Terminated（终止）"><a href="#Terminated（终止）" class="headerlink" title="Terminated（终止）"></a>Terminated（终止）</h4><p>线程执行完毕</p><h4 id="线程状态转化图"><a href="#线程状态转化图" class="headerlink" title="线程状态转化图"></a>线程状态转化图</h4><p><img src="https://firebasestorage.googleapis.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-L_5HvtIhTFW9TQlOF8e%2F-L_5TIKcBFHWPtY3OwUo%2F-L_5TJM7CvFzBq6T_50d%2F%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.png?generation=1551665550335701&alt=media" alt="线程状态转换图"></p><h4 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h4><p>目前在Java里还没有安全直接的方法来停止线程，但是Java提供了线程中断机制来处理需要中断线程的情况。</p><blockquote><p>线程中断机制是一种协作机制。需要注意，通过中断操作并不能直接终止一个线程，而是通知需要被中断的线程自行处理。</p></blockquote><p>线程中断的几个方法：</p><pre><code>+ Thread.interrupt()：中断线程。这里的中断线程并不会立即停止线程，而是设置线程的中断状态为true（默认是flase）；+ Thread.interrupted()：测试当前线程是否被中断。线程的中断状态受这个方法的影响，意思是调用一次使线程中断状态设置为true，连续调用两次会使得这个线程的中断状态重新转为false；+ Thread.isInterrupted()：测试当前线程是否被中断。与上面方法不同的是调用这个方法并不会影响线程的中断状态。</code></pre><blockquote><p>在线程中断机制里，当其他线程通知需要被中断的线程后，线程中断的状态被设置为true，但是具体被要求中断的线程要怎么处理，完全由被中断线程自己而定，可以在合适的实际处理中断请求，也可以完全不处理继续执行下去。</p></blockquote><hr><p>操作系统中的线程主要有三个状态：</p><pre><code>+ 就绪状态（ready）：线程正在等待使用CPU，经过程序调用之后可以进入Running状态+ 运行状态（running）：线程正在等待使用CPU+ 等待状态（waiting）： 线程经过等待事件的调用或者正在等待其他资源（如I/O）</code></pre><p><img src="https://gblobscdn.gitbook.com/assets%2F-L_5HvtIhTFW9TQlOF8e%2F-L_5TIKcBFHWPtY3OwUo%2F-L_5TJM1VhwmwbNGzqwJ%2F%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.png?alt=media" alt="系统进程/线程转换图"></p><hr><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><hr><h3 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h3><p>// 真的跑线程组的代码才是，环境都配置好，让代码运行起来</p><hr><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java并发编程之一：线程基础&quot;&gt;&lt;a href=&quot;#Java并发编程之一：线程基础&quot; class=&quot;headerlink&quot; title=&quot;Java并发编程之一：线程基础&quot;&gt;&lt;/a&gt;Java并发编程之一：线程基础&lt;/h2&gt;&lt;h3 id=&quot;并发简史和基础概念&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="concurrent" scheme="http://yoursite.com/tags/concurrent/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
