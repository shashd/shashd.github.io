<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1105z&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-29T07:38:58.571Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>1105z</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java并发编程之一：线程基础</title>
    <link href="http://yoursite.com/2020/07/29/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%B8%80%EF%BC%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/07/29/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%B8%80%EF%BC%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2020-07-29T07:38:58.395Z</published>
    <updated>2020-07-29T07:38:58.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java并发编程之一：线程基础"><a href="#Java并发编程之一：线程基础" class="headerlink" title="Java并发编程之一：线程基础"></a>Java并发编程之一：线程基础</h2><h3 id="并发简史和基础概念"><a href="#并发简史和基础概念" class="headerlink" title="并发简史和基础概念"></a>并发简史和基础概念</h3><p>​        在早期，计算机不包含操作系统，单个计算机只能从头到尾执行一个程序，并且该程序能够访问到计算中所有的资源，即使是之后出现的批处理操作系统，<strong>本质上还是串行地执行程序，内存中始终只有一个程序正在执行</strong>。在这种环境中，编写和执行程序非常麻烦并且效率比较低下，对于计算机资源的浪费惊人。在此情况下，操作系统被开发出，从而使得一次性执行多个计算机程序成为现实。</p><p>​        计算机中每个独立执行的程序都是一个进程，<strong>进程是资源分配的最小单位</strong>，不同进程之间的数据很难共享数据（但可以做到），进程之间不会互相影响，进程上下文切换的耗损大，也可以理解为<strong>CPU工作时间段的集合描述</strong>。</p><p>​        线程是计算机最基础的调度单位，又被称为<strong>轻量级进程</strong>。一个线程可以包含多个线程，线程共享进程的<strong>内存地址空间</strong>，每个线程中都有程序计算器等结构。多线程在使用的时候需要制定一套同步协调机制，以防出现一个线程在针对共享的内存地址空间进行数据的操作时候，出现另一个线程对数据修改、删除的情况的<strong>安全性问题</strong>。</p><p>​        线程和进程的区别：进程是资源分配的最小单位，线程是CPU调度的最小单位；进程不资源共享，线程共享同一个进程下的资源；进程的上下文切换的损耗高，线程的上下文切换损耗低。</p><h3 id="线程结构"><a href="#线程结构" class="headerlink" title="线程结构"></a>线程结构</h3><h3 id="实现线程的方式"><a href="#实现线程的方式" class="headerlink" title="实现线程的方式"></a>实现线程的方式</h3><ul><li><p>实现Runnable接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用Runnable接口的方式实现线程的创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过Runnable接口重写run()方法，将实例传送到Thread类中就可以直接实现多线程。</p></li></ul><ul><li><p>继承Thread类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用继承Thread方法实现线程的创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单继承Thread类并且重写类中的run()方法。</p></li><li><p>线程池创建线程</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造方法</span></span><br><span class="line">    DefaultThreadFactory()&#123;</span><br><span class="line">        SecurityManager s = System.getSecurityManager();</span><br><span class="line">        group = (s != <span class="keyword">null</span>)?s.getThreadGroup(): <span class="comment">// 获取线程组</span></span><br><span class="line">            Thread.currentThread().getThreadGroup();</span><br><span class="line">        namePrefix = <span class="string">"pool-"</span> +</span><br><span class="line">                poolNumber.getAndIncrement() +</span><br><span class="line">                <span class="string">"-thread"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本质还是通过Thread来创建的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span></span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(group,r,namePrefix+threadNumber.getAndIncrement(),<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(t.isDaemon())</span><br><span class="line">            t.setDarmon(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(t.getPriority()!=Thread.NORM_PROORITY)</span><br><span class="line">            t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Callable创建线程</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallableTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自建函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//提交任务，用Future提交返回线程执行后的结果</span></span><br><span class="line">        Future&lt;Integer&gt; future = service.submit(<span class="keyword">new</span> CallableTask());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="线程状态以及转换"><a href="#线程状态以及转换" class="headerlink" title="线程状态以及转换"></a>线程状态以及转换</h3><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java并发编程之一：线程基础&quot;&gt;&lt;a href=&quot;#Java并发编程之一：线程基础&quot; class=&quot;headerlink&quot; title=&quot;Java并发编程之一：线程基础&quot;&gt;&lt;/a&gt;Java并发编程之一：线程基础&lt;/h2&gt;&lt;h3 id=&quot;并发简史和基础概念&quot;&gt;&lt;a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>article title</title>
    <link href="http://yoursite.com/2020/07/26/article-title/"/>
    <id>http://yoursite.com/2020/07/26/article-title/</id>
    <published>2020-07-26T06:31:10.000Z</published>
    <updated>2020-07-26T11:05:20.387Z</updated>
    
    <content type="html"><![CDATA[<p>this is a test</p><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>part1</p><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>part2</p><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><h2 id="part-3"><a href="#part-3" class="headerlink" title="part 3"></a>part 3</h2><p>part3 content</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;this is a test&lt;/p&gt;
&lt;h1 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h1&gt;&lt;p&gt;part1&lt;/p&gt;
&lt;h1 id=&quot;2&quot;&gt;&lt;a href=&quot;#2&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="云服务器" scheme="http://yoursite.com/categories/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="centOS" scheme="http://yoursite.com/tags/centOS/"/>
    
      <category term="tomcat" scheme="http://yoursite.com/tags/tomcat/"/>
    
  </entry>
  
</feed>
