<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1105z&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-17T02:49:03.051Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>1105z</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java并发编程之三:并发容器</title>
    <link href="http://yoursite.com/2020/08/15/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%B8%89-%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2020/08/15/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%B8%89-%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/</id>
    <published>2020-08-15T01:23:14.000Z</published>
    <updated>2020-08-17T02:49:03.051Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java并发编程之三-并发容器"><a href="#Java并发编程之三-并发容器" class="headerlink" title="Java并发编程之三: 并发容器"></a>Java并发编程之三: 并发容器</h3><hr><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p>HashMap是线程不安全的容器，此处不提及HashMap实现的各种原理，而是关注于容器中和并发相关的特性上。</p><h5 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HashMap的put实现源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash,table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i];e!=<span class="keyword">null</span>;e=e.next)&#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k == e.key) == key || key.equals(k)))&#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAcess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 非原子操作，非为读取、增加、保存三个步骤</span></span><br><span class="line">    modCount++;</span><br><span class="line">addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，HashMap本身默认的容量并不大，如果不断添加新的数据，那么会在合适的时间进行拓容。这个拓展的期间中会新建一个新的空数组，并且将旧的数据填充到新的数组中去。如果这个过程中有线程获取数值，可能会取到null，而不是原来希望的添加的数值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapNotSafe</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"> <span class="comment">// 对应的十进制的数字是65535，选取的目的是为了扩容回填数字的时候不要填充地太快</span></span><br><span class="line">        <span class="keyword">final</span> Integer targetKey = <span class="number">0b1111_1111_1111_1111</span>; </span><br><span class="line">        <span class="keyword">final</span> String targetValue = <span class="string">"v"</span>;</span><br><span class="line">        map.put(targetKey, targetValue);</span><br><span class="line"><span class="comment">// 新线程不断注入数据到Map中</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            IntStream.range(<span class="number">0</span>, targetKey).forEach(key -&gt; map.put(key, <span class="string">"someValue"</span>));</span><br><span class="line">        &#125;).start();</span><br><span class="line"> <span class="comment">// 循环不断取出注入的数值</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == map.get(targetKey)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"HashMap is not thread safe."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果证明了非安全性</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.RuntimeException: HashMap is not thread safe.</span><br><span class="line">at lesson29.HashMapNotSafe.main(HashMapNotSafe.java:<span class="number">25</span>)</span><br></pre></td></tr></table></figure><h5 id="多线程情况下的问题"><a href="#多线程情况下的问题" class="headerlink" title="多线程情况下的问题"></a>多线程情况下的问题</h5><ul><li><p>同时put导致数据丢失</p><p>如果多个线程同时使用put添加元素，而且刚好两个put的key都是一样的，那么就发生了碰撞，而且两个线程判断位置又是空的，最后只有一个数据会被保留，造成了数据的损失。</p></li><li><p>可见性问题无法保证</p><p>可见性即当一个线程对该容器操作的时候，其他线程也要可见到其操作。如一个线程对一个数字进行了修改，但是其他线程并不能得知到该操作。</p></li><li><p>死循环造成CPU100%</p><p>发生的最主要的原因就是在扩容的时候，扩容的逻辑会反转散列桶中的节点顺序，当有多个线程进行扩容的时候，因为其非线程安全的特性，可能形成一个循环链表，故而不会有遍历的结束条件。</p></li></ul><blockquote><p>推荐使用线程安全同时性能比较好的ConcurrentHashMap</p></blockquote><h4 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h4><p>Java8中的ConcurrentHashMap比起Java7的版本有了许多的调整，此处针对这些调整进行比较。</p><h5 id="Java7中的ConcurrentHashMap结构"><a href="#Java7中的ConcurrentHashMap结构" class="headerlink" title="Java7中的ConcurrentHashMap结构"></a>Java7中的ConcurrentHashMap结构</h5><p>内部进行了Segment分段，每个Segment继承了ReentranLock，各个Segment都是独立上锁并且不会互相影响的。相比于HashTable将整个对象锁住相比，并发效率大大提升。</p><p>Segment的底层数据结构还是数组和链表组成的拉链法结构。默认有0-15共16个Segment。初始化的时候可以设置该数值为其他，但是一旦初始化后是不可以扩容的。</p><h5 id="Java8中的ConcurrentHashMap"><a href="#Java8中的ConcurrentHashMap" class="headerlink" title="Java8中的ConcurrentHashMap"></a>Java8中的ConcurrentHashMap</h5><p>几乎重写了ConcurrentHashMap，从原来的1000多行代码到了现在的6000行代码。</p><p>不同的是当链表长度大于一个阈值的时候（默认为8），并且满足一定的容量要求，即容量大于等于MIN_TREEFY_CAPACITY（默认为64），就会将链表转换成红黑树，提升查找的性能，避免极端情况下冲突链表非常长的情况。</p><h6 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h6><p><strong>Node节点</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">N</span>,<span class="title">V</span>&gt; <span class="title">implementS</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="keyword">volatile</span> V val;<span class="comment">// 保证val的可见性</span></span><br><span class="line">    <span class="keyword">volatile</span> Node&lt;N,V&gt; next;<span class="comment">// 指向下一个的节点</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>put方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算 hash 值</span></span><br><span class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K, V&gt;[] tab = table; ; ) &#123;</span><br><span class="line">        Node&lt;K, V&gt; f;</span><br><span class="line">        <span class="keyword">int</span> n, i, fh;</span><br><span class="line">        <span class="comment">//如果数组是空的，就进行初始化</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">            tab = initTable();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找该 hash 值对应的数组下标</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果该位置是空的，就用 CAS 的方式放入新值</span></span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                    <span class="keyword">new</span> Node&lt;K, V&gt;(hash, key, value, <span class="keyword">null</span>))) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//hash值等于 MOVED 代表在扩容</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED) &#123;</span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//槽点上是有值的情况</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            V oldVal = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//用 synchronized 锁住当前槽点，保证并发安全</span></span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="comment">//如果是链表的形式</span></span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="comment">//遍历链表</span></span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K, V&gt; e = f; ; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="comment">//如果发现该 key 已存在，就判断是否需要进行覆盖，然后返回</span></span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                    ((ek = e.key) == key ||</span><br><span class="line">                                            (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent) &#123;</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K, V&gt; pred = e;</span><br><span class="line">                            <span class="comment">//到了链表的尾部也没有发现该 key，说明之前不存在，就把新值添加到链表的最后</span></span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K, V&gt;(hash, key,</span><br><span class="line">                                        value, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//如果是红黑树的形式</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        Node&lt;K, V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="comment">//调用 putTreeVal 方法往红黑树里增加数据</span></span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K, V&gt;) f).putTreeVal(hash, key,</span><br><span class="line">                                value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent) &#123;</span><br><span class="line">                                p.val = value;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//检查是否满足条件并把链表转换为红黑树的形式，默认的 TREEIFY_THRESHOLD 阈值是 8</span></span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD) &#123;</span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//putVal 的返回是添加前的旧值，所以返回 oldVal</span></span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>get方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="keyword">int</span> n, eh; K ek;</span><br><span class="line">    <span class="comment">//计算 hash 值</span></span><br><span class="line">    <span class="keyword">int</span> h = spread(key.hashCode());</span><br><span class="line">    <span class="comment">//如果整个数组是空的，或者当前槽点的数据是空的，说明 key 对应的 value 不存在，直接返回 null</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//判断头结点是否就是我们需要的节点，如果是则直接返回</span></span><br><span class="line">        <span class="keyword">if</span> ((eh = e.hash) == h) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果头结点 hash 值小于 0，说明是红黑树或者正在扩容，就用对应的 find 方法来查找</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> (p = e.find(h, key)) != <span class="keyword">null</span> ? p.val : <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//遍历链表来查找</span></span><br><span class="line">        <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                    ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算Hash，找到对应的槽点。如果数组为空/位置为空，直接返回null。如果刚好是需要的直接返回，如果是红黑树/正在扩容，使用find方法查找。如果是链表，循环查找。</p><h5 id="Java7和Java8实现的对比"><a href="#Java7和Java8实现的对比" class="headerlink" title="Java7和Java8实现的对比"></a>Java7和Java8实现的对比</h5><ul><li>数据结构<ul><li>Java7中Segment分段锁，数据+链表</li><li>Java8中数组+链表+红黑树</li></ul></li><li>并发度<ul><li>Java7最大并发数就是Segment的个数，默认为16</li><li>Java8中，锁粒度更细，理想情况下数组长度就是并发的最大个数，并发度更高</li></ul></li><li>并发安全的原理<ul><li>Java7使用Segment分段所，Segment继承ReentrantLock</li><li>Java8采用Node + CAS + synchronized</li></ul></li><li>Hash碰撞的处理<ul><li>Java7遇到Hash冲突，使用拉链法</li><li>Java8先使用拉链发，超过一定的阈值，转换为红黑树</li></ul></li><li>查询时间复杂度<ul><li>Java7，O(N)，即链表长度</li><li>Java8，如果转换为红黑树，O(logN)</li></ul></li></ul><h5 id="为什么转红黑树的阈值设置为8？"><a href="#为什么转红黑树的阈值设置为8？" class="headerlink" title="为什么转红黑树的阈值设置为8？"></a>为什么转红黑树的阈值设置为8？</h5><p>一开始是需要将链表转换为为红黑树的，链表的查询时间复杂度为O(N)，红黑树查询的时间复杂度为O(logN)，随着链表越来越长，查询的效率就越低下，所以为了提升查询的性能，需要转换为红黑树。不一开始就设置为红黑树的原因：单个TreeNode占用的空间是普通Node的两倍，所以只有当包含足够多的Node时才会转换成TreeNode。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源码中对设置为8这个数字进行了说明</span></span><br><span class="line">In usages with well-distributed user hashCodes, tree bins </span><br><span class="line">are rarely used.  Ideally, under random hashCodes, the </span><br><span class="line">frequency of nodes in bins follows a Poisson distribution </span><br><span class="line">(http:<span class="comment">//en.wikipedia.org/wiki/Poisson_distribution) with a </span></span><br><span class="line">parameter of about <span class="number">0.5</span> on average <span class="keyword">for</span> the <span class="keyword">default</span> resizing </span><br><span class="line">threshold of <span class="number">0.75</span>, although with a large variance because </span><br><span class="line">of resizing granularity. Ignoring variance, the expected </span><br><span class="line"><span class="function">occurrences of list size k <span class="title">are</span> <span class="params">(exp(<span class="number">-0.5</span>)</span> * <span class="title">pow</span><span class="params">(<span class="number">0.5</span>, k)</span> / </span></span><br><span class="line"><span class="function"><span class="title">factorial</span><span class="params">(k)</span>). The first values are:</span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function"> 0:    0.60653066</span></span><br><span class="line"><span class="function"> 1:    0.30326533</span></span><br><span class="line"><span class="function"> 2:    0.07581633</span></span><br><span class="line"><span class="function"> 3:    0.01263606</span></span><br><span class="line"><span class="function"> 4:    0.00157952</span></span><br><span class="line"><span class="function"> 5:    0.00015795</span></span><br><span class="line"><span class="function"> 6:    0.00001316</span></span><br><span class="line"><span class="function"> 7:    0.00000094</span></span><br><span class="line"><span class="function"> 8:    0.00000006</span></span><br><span class="line"><span class="function"> more: less than 1 in ten million</span></span><br></pre></td></tr></table></figure><p>上述的意思是，如果hashCode分布良好，红黑树的形式会很少被用到，因为很少出现链表长懂得情况。理想情况下，链表长度符合泊松分布，各个长度的命中概率依次递减，当长度为8的时候，概率仅仅为0.000000006，小于千万分之一，而且通常Map中并不会存储如此多的数据，所以通常不会从链表转换为红黑树。</p><p>事实上，转换为红黑树的设置更多是为了防止用户自己实现不好的哈希算法时导致链表过长的问题，此时的转换更多是一种保底的策略，保证极端情况下查询的效率</p><h5 id="ConcurrentHashMap和Hashtable的区别"><a href="#ConcurrentHashMap和Hashtable的区别" class="headerlink" title="ConcurrentHashMap和Hashtable的区别"></a>ConcurrentHashMap和Hashtable的区别</h5><p>ConcurrentHashMap和Hashtable都是线程安全的，但是各种方面上有所不同</p><ul><li><p>出现的版本的不同</p><ul><li>ConcurrentHashMapJDK1.5后才出现</li><li>Hashtable在JDK1.0的时期就存在了，JDK1.2时期实现了Map接口</li></ul></li><li><p>实现线程安全的方式的不同</p><ul><li>Hashtable通过synchronized关键字实现线程安全，几乎所有的方法都被synchronized修改</li><li>ConcurrentHashMap通过CAS + synchronized + Node节点的方式实现线程安全</li></ul></li><li><p>性能表现的不同</p><ul><li>线程数量增加时，Hashtable的性能急剧下降，并且每次都要锁住整个对象，上下文切换的开销大，吞吐量差，甚至可能不如单线程</li><li>ConcurrentHashMap上锁是部分上锁的，吞吐量大</li></ul></li><li><p>迭代时修改的不同</p><ul><li><p>Hashtable不允许在迭代期间修改内容，否则会抛出ConcurrentModificationException异常，其原理是检测modCount变量</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// expectedModCount是迭代器生成的时候随之生成的，不会改变</span></span><br><span class="line">    <span class="comment">// 当迭代的过程中对Hashtable的内容做了修改，modCount会有所反应</span></span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    <span class="keyword">return</span> nextElement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ConcurrentHashMap在迭代期间修改内容，也不会抛出异常</p></li></ul></li></ul><blockquote><p>Hashtable现在已经并不推荐使用</p></blockquote><h4 id="CopyOnWriteAttayList"><a href="#CopyOnWriteAttayList" class="headerlink" title="CopyOnWriteAttayList"></a>CopyOnWriteAttayList</h4><p>在该容器之前，已经有了线程安全使得Vector和Collections.synchronizedList()就可以使用。接下来展示的是线程安全的Vector的部分方法的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> elementCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= elementCount)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayINdexOutOfBoundsException(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到使用的是粒度比较大懂得synchronized，并发的效率比较低，和Hashtable类似。并且前面的集中List在迭代过程中不允许编辑，否则就会抛出异常。所以从JDK1.5开始，Java并发包中使用了CopyOnWrite机制实现的并发容器CopyOnWriteArrayList作为主要的并发List，该并发包还包含CopyOnWriteArraySet，底层使用CopyOnWriteArrayList实现的。</p><h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h5><ul><li><p>读操作尽可能快，写操作慢一些没有关系</p><p>很多应用场景中，读操作可能大于写操作。比如某些系统级别的信息，往往只需要加载或者修改很少的次数，但是会被系统中所有的模块频繁地访问。</p></li><li><p>读多写少</p><p>黑名单是一个典型的样例，更新次数少，读取次数多。</p></li></ul><h5 id="读写规则"><a href="#读写规则" class="headerlink" title="读写规则"></a>读写规则</h5><ul><li><p>读写锁的规则</p><p>读写锁的思想是：读读共享，其他都互斥（不能同时发生），原因是读操作是安全的，但是写操作会修改数据，不允许有多个线程同时执行写操作。</p></li><li><p>对读写锁规则的升级</p><p>CopyOnWriteArrayList对读写锁的规则进行了进一步的升级，为了将性能发挥到极致，CopyOnWriteArrayList读取也是不用加锁的，就是说<strong>写入也不会阻塞读取操作，可以在写入的同时进行读取</strong>，不过还是不允许两个线程同时进行写操作，但是写入的同时允许读操作可以大大提升读操作的性能。</p></li></ul><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li><p>CopyOnWrite的含义</p><p>意思是，当容器需要被修改的时候，不直接修改当前容器，而是先将当前的容器进行Copy，然后修改新的容器，<strong>完成后再将原来容器得引用指向新的容器</strong>。</p><p>好处是，利用了<strong>不变性</strong>原理，每次容器的修改都是创建新副本，所以对于旧的容器来说，其实就是不可变的，即线程安全的。所以可以对容器进行并发读的操作，也不需要加锁。</p></li><li><p>迭代期间允许修改集合内容</p><p>众所周知，ArayList在迭代期间修改数据的话会抛出异常：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 检查是否有人修改了变量的内容</span></span><br><span class="line">    <span class="comment">// 保存修改次数 和 期待的修改次数 是否相同</span></span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> COncurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是CopyOnWriteArrayList在迭代的时候不会抛出异常，因为迭代器使用的仍然是旧的数组</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 描述： 演示CopyOnWriteArrayList迭代期间可以修改集合的内容</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArrayListDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        CopyOnWriteArrayList&lt;Integer&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;(<span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line"> </span><br><span class="line">        System.out.println(list); <span class="comment">//[1, 2, 3]</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//Get iterator 1</span></span><br><span class="line">        Iterator&lt;Integer&gt; itr1 = list.iterator();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//Add one element and verify list is updated</span></span><br><span class="line">        list.add(<span class="number">4</span>);</span><br><span class="line"> </span><br><span class="line">        System.out.println(list); <span class="comment">//[1, 2, 3, 4]</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//Get iterator 2</span></span><br><span class="line">        Iterator&lt;Integer&gt; itr2 = list.iterator();</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">"====Verify Iterator 1 content===="</span>);</span><br><span class="line"> </span><br><span class="line">        itr1.forEachRemaining(System.out::println); <span class="comment">//1,2,3</span></span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">"====Verify Iterator 2 content===="</span>);</span><br><span class="line"> </span><br><span class="line">        itr2.forEachRemaining(System.out::println); <span class="comment">//1,2,3,4</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">====Verify Iterator <span class="number">1</span> content====</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">====Verify Iterator <span class="number">2</span> content====</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>可以看到打印的结果不同，分属于不同的迭代器。</p></li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>适用于所有的CopyOnWrite容器</p><ul><li><p>内存占用问题</p><p>复制对象导致占用额外的内存</p></li><li><p>元素较多/复杂的情况下，复制的开销大</p><p>除了消耗内存资源外，还会消耗CPU等资源</p></li><li><p>数据一致性问题</p><p>修改后的容器数据对于其他的线程来说并不是立马可见的</p></li></ul><h5 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 可重入锁对象 */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">transient</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** CopyOnWriteArrayList底层由数组实现，volatile修饰，保证数组的可见性 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Object[] array;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 得到数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span> Object[] getArray() &#123;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 设置数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setArray</span><span class="params">(Object[] a)</span> </span>&#123;</span><br><span class="line">    array = a;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 初始化CopyOnWriteArrayList相当于初始化数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CopyOnWriteArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    setArray(<span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 得到原数组的长度和元素</span></span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 复制出一个新数组</span></span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 添加时，将新元素添加到新数组中</span></span><br><span class="line">        newElements[len] = e;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 将volatile Object[] array 的指向替换成新数组</span></span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 读操作相关的三个方法，可以看到没有加锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> get(getArray(), index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> Object[] getArray() &#123;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">get</span><span class="params">(Object[] a, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (E) a[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 迭代器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">COWIterator</span><span class="params">(Object[] elements, <span class="keyword">int</span> initialCursor)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// cursor为游标</span></span><br><span class="line">    cursor = initialCursor;</span><br><span class="line">    <span class="comment">// snapshot为数据的快照，即创建迭代器时刻的数据状态</span></span><br><span class="line">    snapshot = elements;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 所有的操作都是基于snapshot快照进行的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! hasNext())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> (E) snapshot[cursor++];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java并发编程之三-并发容器&quot;&gt;&lt;a href=&quot;#Java并发编程之三-并发容器&quot; class=&quot;headerlink&quot; title=&quot;Java并发编程之三: 并发容器&quot;&gt;&lt;/a&gt;Java并发编程之三: 并发容器&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;HashMa
      
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="concurrent" scheme="http://yoursite.com/tags/concurrent/"/>
    
      <category term="container" scheme="http://yoursite.com/tags/container/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程之二：并发锁</title>
    <link href="http://yoursite.com/2020/08/08/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%BA%8C%EF%BC%9A%E5%B9%B6%E5%8F%91%E9%94%81/"/>
    <id>http://yoursite.com/2020/08/08/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%BA%8C%EF%BC%9A%E5%B9%B6%E5%8F%91%E9%94%81/</id>
    <published>2020-08-08T02:55:22.000Z</published>
    <updated>2020-08-14T05:19:24.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java并发编程之一：并发锁"><a href="#Java并发编程之一：并发锁" class="headerlink" title="Java并发编程之一：并发锁"></a>Java并发编程之一：并发锁</h2><h3 id="锁的分类标准和简介"><a href="#锁的分类标准和简介" class="headerlink" title="锁的分类标准和简介"></a>锁的分类标准和简介</h3><p>可以根据分类标准将锁分为7大类型，分别是：</p><ul><li>偏向锁/轻量级锁/重量级锁</li><li>可重入锁/非可重入锁</li><li>共享锁/独占锁</li><li>公平锁/非公平锁</li><li>悲观锁/乐观锁</li><li>自旋锁/非自旋锁</li><li>可中断锁/不可中断锁</li></ul><h4 id="偏向锁-轻量级锁-重量级锁"><a href="#偏向锁-轻量级锁-重量级锁" class="headerlink" title="偏向锁/轻量级锁/重量级锁"></a>偏向锁/轻量级锁/重量级锁</h4><p>这三种锁特指的是<code>synchronized</code>锁的状态，通过在对象头中的mark word来表明锁的状态。</p><ul><li><p>偏向锁</p><p>其思想是，如果从头到尾，对于这把锁都不存在竞争，那么就没有必要进行上锁，只需要打一个标记就足够。一个对象被初始化后，还没有任何线程来获取它的锁时，它就是可偏向的，当有第一个线程访问并尝试获取锁的时候，会记录当前线程，如果以后尝试获取锁的线程刚好是偏向锁的拥有者，就可以直接获取锁，开销小，性能最好。</p></li><li><p>轻量级锁</p><p>JVM很多情况下，synchronized中的代码是被多个线程交替执行的，而不是同时执行的，也就是说不存在竞争，或者说只有短时间的竞争，用CAS就可以解决，这种情况下使用重量级的互斥锁并没有必要。轻量级锁指的是锁原来是偏向锁的时候，被另一个线程访问，说明存在竞争，就会从偏向锁升级为轻量级锁，线程会通过自旋的形式获取锁，而不会陷入阻塞。</p></li><li><p>重量级锁</p><p>重量级锁是互斥锁，利用操作系统的同步机制实现，所以开销比较大。当多个线程竞争，而且竞争时间长的时候，轻量锁在不能满足需求的原因下就会升级为重量级锁。重量级锁会把获取不到锁的线程阻塞，性能最差。</p></li></ul><h4 id="可重入锁-非可重入锁"><a href="#可重入锁-非可重入锁" class="headerlink" title="可重入锁/非可重入锁"></a>可重入锁/非可重入锁</h4><p>可重入锁指的线程当前已经持有当前的锁了，能在不释放这把锁的情况下，再次获取这把锁。不可重入锁就是指已经持有锁的情况下，如果想要再次获取这把锁，需要先释放再获取。</p><p>典型的可重入锁是ReentrantLock，且reentrant的意思就是可重入。</p><h4 id="共享锁-独占锁"><a href="#共享锁-独占锁" class="headerlink" title="共享锁/独占锁"></a>共享锁/独占锁</h4><p>共享锁指的是同一个锁可以被多个线程<strong>同时</strong>获取，独占锁指的是，这把锁只能<strong>同时</strong>被一个线程获取。读写锁，很好地诠释了共享锁和独占锁的思想。其中的读锁是共享锁，写锁是独占锁。</p><h4 id="公平锁-非公平锁"><a href="#公平锁-非公平锁" class="headerlink" title="公平锁/非公平锁"></a>公平锁/非公平锁</h4><p>公平的含义在于如果线程当前无法获取该锁，那么线程就都会进入等待，开始排队，在等待队列力等待时间长的会先获取到锁，即按照线程的顺序先进先得。非公平锁则是会在<strong>合适的时机</strong>出现插队的情况。</p><p>合适的时机指的是，假设当前线程在请求锁的时候，恰好前一个持有锁的线程释放了锁，那么当前申请锁的线程就可以不顾之前排队的线程直接插队获取到锁。如果请求的时候没有刚好释放锁，那么还是一样要排队。</p><p><strong>但是为什么要设置非公平锁？</strong></p><p>假设当前有三个线程A、B、C，线程B请求锁，但是线程A拥有锁，线程B陷入等待，并且线程B会被挂起，进入到阻塞状态。此时线程A释放锁，唤醒B是需要比较大的开销的，所以根据非公平策略，将锁分配给线程C，如果线程C执行的内容不多的话，可能线程C执行完任务后，线程B才被完全唤醒，而线程B的唤醒时间没有被推迟，但是提升了整体的效率。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：演示公平锁，分别展示公平和不公平的情况，非公平锁会让现在持有锁的线程优先再次获取到锁。代码借鉴自Java并发编程实战手册2.7。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FairAndUnfair</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        PrintQueue printQueue = <span class="keyword">new</span> PrintQueue();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Thread thread[] = <span class="keyword">new</span> Thread[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            thread[i] = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Job(printQueue), <span class="string">"Thread "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            thread[i].start();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PrintQueue printQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Job</span><span class="params">(PrintQueue printQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.printQueue = printQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">"%s: Going to print a job\n"</span>, Thread.currentThread().getName());</span><br><span class="line">        printQueue.printJob(<span class="keyword">new</span> Object());</span><br><span class="line">        System.out.printf(<span class="string">"%s: The document has been printed\n"</span>, Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过ReentrantLock中的参数设置公平/非公平锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock queueLock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printJob</span><span class="params">(Object document)</span> </span>&#123;</span><br><span class="line">        queueLock.lock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long duration = (<span class="keyword">long</span>) (Math.random() * <span class="number">10000</span>);</span><br><span class="line">            System.out.printf(<span class="string">"%s: PrintQueue: Printing a Job during %d seconds\n"</span>,</span><br><span class="line">                    Thread.currentThread().getName(), (duration / <span class="number">1000</span>));</span><br><span class="line">            Thread.sleep(duration);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            queueLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        queueLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long duration = (<span class="keyword">long</span>) (Math.random() * <span class="number">10000</span>);</span><br><span class="line">            System.out.printf(<span class="string">"%s: PrintQueue: Printing a Job during %d seconds\n"</span>,</span><br><span class="line">                    Thread.currentThread().getName(), (duration / <span class="number">1000</span>));</span><br><span class="line">            Thread.sleep(duration);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            queueLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="优缺点比较"><a href="#优缺点比较" class="headerlink" title="优缺点比较"></a>优缺点比较</h5><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>公平锁</td><td>线程公平平等，等待一定时间后都有执行的机会</td><td>更慢，吞吐量更小</td></tr><tr><td>非公平锁</td><td>更快，吞吐量更大</td><td>可能产生线程饥饿，就是某些线程长时间都不会被执行</td></tr></tbody></table><h5 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7373984872572414699L</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/** Synchronizer providing all implementation mechanics */</span></span><br><span class="line">    <span class="comment">// ReentrantLock包含一个Sync类，继承自AQS</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueueSynchronizer</span></span>&#123;...&#125;</span><br><span class="line"><span class="comment">// 非公平锁</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;...&#125;</span><br><span class="line"><span class="comment">// 公平锁</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;...&#125;</span><br><span class="line"><span class="comment">// 公平锁的锁获取源码</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp; <span class="comment">//这里判断了 hasQueuedPredecessors()，判断队列中是否有线程在排队了</span></span><br><span class="line">                compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 非公平锁的锁获取源码</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123; <span class="comment">//这里没有判断      hasQueuedPredecessors()，和公平锁的获取的差别</span></span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意的是即使设置了公平锁，如果使用tryLock方法，也可以直接插队</span></span><br><span class="line"><span class="comment">// 可以看到实现是调用的非公平锁的获取方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sync.nonfairTryAcquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="悲观锁-乐观锁"><a href="#悲观锁-乐观锁" class="headerlink" title="悲观锁/乐观锁"></a>悲观锁/乐观锁</h4><p>悲观锁认为多个线程争夺一个锁的情况总是发生，所以在获取资源之前，必须先拿到锁，达到独占目的，以至于在操作资源的时候，其他线程不会来影响。乐观锁不要求获取资源前拿到锁，也不会锁住资源，利用CAS理念，在不独占资源的情况下，对资源进行了操作。</p><h4 id="自旋锁-非自旋锁"><a href="#自旋锁-非自旋锁" class="headerlink" title="自旋锁/非自旋锁"></a>自旋锁/非自旋锁</h4><p>自旋锁的理念是如果现在线程不能获取锁，并不直接陷入阻塞或者释放CPU资源，而是开始利用循环，不断地尝试获取锁，循环的过程被比喻成自旋。非自选就是拿不到锁直接放弃，或是去排队、陷入阻塞。</p><h4 id="可中断锁-不可中断锁"><a href="#可中断锁-不可中断锁" class="headerlink" title="可中断锁/不可中断锁"></a>可中断锁/不可中断锁</h4><p><code>synchronized</code>关键字修是的锁代表不可终端锁，一旦线程申请锁，只能等到拿到锁之后才可以进行其他的逻辑操作。</p><p><code>ReentrantLock</code>是典型的可中断锁，如使用<code>lockInterruptibly</code>方法获取锁的过程中，突然不想获取，可以在中断之后处理其他的逻辑，而不是干等。</p><hr><h3 id="悲观锁-乐观锁本质"><a href="#悲观锁-乐观锁本质" class="headerlink" title="悲观锁/乐观锁本质"></a>悲观锁/乐观锁本质</h3><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>悲观锁比较悲观，认为不锁资源，其他线程就会争抢，造成数据错误，所以为了保证正确性，都会锁住资源，保证其他线程无法访问该资源，确保数据资源内容万无一失。</p><p>Java中悲观锁的实现包含<code>synchronized</code>和<code>Lock</code>相关类等，如<code>ReentrantLock</code>。</p><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>乐观锁比较乐观，认为操作资源的过程中不会有其他线程的干扰，所以不用锁住资源。为了保证数据正确性，会比较修改数据期间，数据是否被其他的线程修改过，如果有的话会放弃当前的修改，并选择报错、重试等策略。但是可能出现ABA问题，即其他的线程将数据修改后又修改回来，乐观锁的机制并不会发。该数据已经被操作过，而是认为其他线程并没有对数据进行干扰。</p><p>典型为原子类，如<code>AtomicInteger</code>，多个线程可以操作一个原子变量。</p><blockquote><p>数据库同时有悲观锁和乐观锁的思想。先使用乐观锁的思想修改数据，如果发现版本号不对，那么就使用悲观锁来保证数据不被其他线程修改</p></blockquote><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>悲观锁适用于并发写入多、临界区代码复杂、竞争积累的场景，此时悲观锁可以避免大量的无用的反复尝试的消耗</p><p>乐观锁适合大部分是读取，少部分是修改的场景，也适合虽然读写多，但是并发并不激烈的情况。这些情况下，乐观锁的不加锁的特点能让性能大幅度提升。</p><p>悲观锁的原始开销大于乐观锁，特点是一劳永逸，就算一直拿不到锁，也不会有额外的开销。反之如果乐观锁如果一直拿不到锁，或者并发量大，竞争激烈，导致不停重试，消耗的资源就会越来越多，甚至开销可能超过悲观锁。所以不同锁的开销要具体看使用的场景而定。</p><hr><h3 id="synchronized锁"><a href="#synchronized锁" class="headerlink" title="synchronized锁"></a>synchronized锁</h3><h4 id="monitor锁的获取和释放"><a href="#monitor锁的获取和释放" class="headerlink" title="monitor锁的获取和释放"></a>monitor锁的获取和释放</h4><p>sychronized就是由monitor锁实现的。每个Java对象都可以用作一个实现同步的锁，这个锁也被称作是内置锁/monitor锁，获取monitor锁的唯一方法就是进入由这个锁保护的同步代码块/方法，线程在进入被synchronized保护的代码块之前，会自动获取锁，并无论怎么退出（异常退出或者正常退出）都会自动释放锁。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其中的intrinsicLock就是monitor锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.intrinsicLock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">method body</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.intrinsicLock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用javap命令查看反汇编的结果"><a href="#使用javap命令查看反汇编的结果" class="headerlink" title="使用javap命令查看反汇编的结果"></a>使用javap命令查看反汇编的结果</h4><p>JVM实现synchronized方法和synchronized代码块的细节是不同的。</p><h5 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">synBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"lagou"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 反汇编的关键信息</span></span><br><span class="line"><span class="comment">// 通过执行javap -verbose xxx.class字节码文件获取</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">synBlock</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: dup</span><br><span class="line">         <span class="number">2</span>: astore_1</span><br><span class="line">         <span class="number">3</span>: monitorenter <span class="comment">// 加锁</span></span><br><span class="line">         4: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         7: ldc           #3                      // String lagou</span><br><span class="line">         9: invokevirtual #4               // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        <span class="number">12</span>: aload_1</span><br><span class="line">        <span class="number">13</span>: monitorexit<span class="comment">// 释放锁</span></span><br><span class="line">        <span class="number">14</span>: goto          <span class="number">22</span></span><br><span class="line">        <span class="number">17</span>: astore_2</span><br><span class="line">        <span class="number">18</span>: aload_1</span><br><span class="line">        <span class="number">19</span>: monitorexit<span class="comment">// 释放锁</span></span><br><span class="line">        <span class="number">20</span>: aload_2</span><br><span class="line">        <span class="number">21</span>: athrow</span><br><span class="line">        <span class="number">22</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>有两个monitorexit的原因是，JVM要保证每个monitorenter都有对应的monitorexit，monitorexit分别被插入到正常结束的位置和异常发生的位置，保证即使发生异常也会释放锁。</p><ul><li><p>monitorenter</p><p>执行monitorenter的线程尝试获取monitor的所有权，将发生下面的三种情况之一：、</p><ul><li>如果该monitor计数为0，线程获取并设置为1，该线程即为拥有者</li><li>线程如果已经有了该monitor，它将重新加入，并且累加计数</li><li>如果其他线程拥有了该monitor，这个线程就会阻塞，直到计数为0，代表被释放了，重试获取该monitor</li></ul></li><li><p>monitorexit</p><p>作用是将monitor的计数减1，直接0为止。代表解锁，其他线程可以尝试获取这个锁。</p></li></ul><h5 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h5><p>同步方法并不是依靠monitorenter和monitorexit指令来实现的，反编译后可以看到有一个ACC_SYNCHRONIZED的flag修饰符表示其为同步方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synMethod</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_SYNCHRONIZED</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">0</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">16</span>: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>当线程访问方法的时候，会查找是否有ACC_SYNCHRONIZED标志，有的话就要先获取到monitor锁，然后再执行方法，完成后释放锁。其他地方和同步代码块的差别并不大。</p><h4 id="synchronzied和Lock的比较和选择"><a href="#synchronzied和Lock的比较和选择" class="headerlink" title="synchronzied和Lock的比较和选择"></a>synchronzied和Lock的比较和选择</h4><h5 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h5><ul><li>两者都用来确保资源线程的安全性</li><li>两者都保证可见性</li><li>两者的有可重入的特性</li></ul><h5 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h5><ul><li>用法上，synchronized可以加在方法上，不需要指定锁对象（可以直接指定为this），也支持同步代码块；Lock几口必须用Lock锁对象加锁和解锁，一般finally中会用unlock防止死锁。前者加锁是隐式的，后者是显式的。</li><li>加锁顺序不同。synchronized解锁的顺序和枷锁的顺序必须完全相反，因为由JVM实现，执行万方法之后会自动解锁，不能自行控制；对于Lock而言，可以不完全按照枷锁的反序解锁。</li><li>synchronized锁不够灵活，只能获取的线程执行完或者因为异常才会释放锁，如果持有锁的线程长时间才释放，整个程序懂得运行效率比较低。如果持有锁的线程一直不释放，其他等待的线程就只能永久等待；Lock的等待锁的过程中，如果使用的lockInterruptibly方法，可以中断退出，也可以使用tryLock等方法尝试获取锁，如果获取不到也可以中途处理别的任务。</li><li>synchronized只能同时被一个线程获取，Lock可以被多个，如读写锁中的读锁（共享锁）</li><li>synchronized是内置锁，由JVM实现，还分为偏向锁、轻量级锁、重量级锁；Lock根据实现的不同，有不同的原理，如ReentrantLock通过AQS获取和释放锁</li><li>是否可以设置为公平锁/非公平锁，synchronized不能，Lock可以</li><li>性能上，Java5之前，synchronized的性能比较差，Java6之后进行了很多的优化，如自适应自选、锁消除、锁粗话等，所以之后两者性能差不多</li></ul><h5 id="两个锁的选择"><a href="#两个锁的选择" class="headerlink" title="两个锁的选择"></a>两个锁的选择</h5><ul><li>能两个都不用最好，推荐使用java.util.concurrent等工具类来处理所有的加锁和释放锁的操作</li><li>如果可以，尽量使用synchronized，因为由JVM实现，加锁和释放锁都是自动的，一旦手动添加lock后，忘记unlock，就更容易出错</li><li>如果特别需要Lock的特殊功能，如尝试获取锁、可中断、超时等功能，才使用Lock</li></ul><h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><p>Lock接口是Java5引入的，最常见的实现类是ReentrantLock。Lock一般并不是用来代替synchronized的，而是在后者不合适或者不足够满足要求的时候，Lock可以提供更加高级的功能。</p><h4 id="Lock的常用方法"><a href="#Lock的常用方法" class="headerlink" title="Lock的常用方法"></a>Lock的常用方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time,TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中获取锁的方法是：lock()、lockInterruptibly()、tryLock()、tryLock(long time,TimeUnit unit)，unlock()释放锁，依次对以上的方法进行分析。</p><h5 id="lock"><a href="#lock" class="headerlink" title="lock()"></a>lock()</h5><p>是最基础的获取锁的方法，在线程获取锁的时候如果锁已经被其他的获取，进行等待。获取锁和释放锁都是显式的，意味着加锁和释放都需要用代码写出来，不能如synchronized一样自动释放锁，需要注意的式try{}同步资源，catch{}捕获异常，finally{}中一定要释放锁。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lock lock = ...;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// 获取到锁保护的资源，开始处理任务</span></span><br><span class="line">    <span class="comment">// 捕获异常</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lock()方法不能被中断，一旦陷入死锁，lock()就会进入到永久等待中，所以一般用tryLock()等更高级的方法来替代lock()</p><h5 id="tryLock"><a href="#tryLock" class="headerlink" title="tryLock()"></a>tryLock()</h5><p>用来尝试获取锁，如果锁没有被其他线程占用，获取成功，返回true，否则返回false，即使拿不到锁也不会一直等待，而是马上返回，避免了死锁情况的发生。可以根据是否获取到锁来执行后续的操作。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lock lock = ...;</span><br><span class="line"><span class="keyword">if</span> (lock.tryLock())&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// 操作任务</span></span><br><span class="line">        <span class="comment">// 捕获异常</span></span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 获取不到锁，做其他事情</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="tryLock-long-time-TimeUnit-unit"><a href="#tryLock-long-time-TimeUnit-unit" class="headerlink" title="tryLock(long time,TimeUnit unit)"></a>tryLock(long time,TimeUnit unit)</h5><p>和tryLock()方法类似，多了超时时间的参数，拿不到锁会等待一段时间，如果结束后还无法获取到锁，就返回false。</p><h5 id="lockInterruptibly"><a href="#lockInterruptibly" class="headerlink" title="lockInterruptibly()"></a>lockInterruptibly()</h5><p>除非当先线程在获取锁中间被中断，否则会一直尝试获取直到获取到为止。lockInterruptibly也是可以响应中断的，可以理解为超时时间是无限长的tryLock(long time,TimeUnit unit)。注意，方法本身会抛出异常，所以不在方法名后抛出异常就要写两个try{}。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"操作资源"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="unlock"><a href="#unlock" class="headerlink" title="unlock()"></a>unlock()</h5><p>解锁操作，对于ReentrantLock执行unlock()的时候，会将锁的计数器减1，如果减到0代表锁已经被完全释放；如果减1后不为0，代表之前被重入了，减1不代表锁被释放，仅仅是减少了持有的次数。</p><hr><h4 id="读写锁ReadWriteLock"><a href="#读写锁ReadWriteLock" class="headerlink" title="读写锁ReadWriteLock"></a>读写锁ReadWriteLock</h4><p>读写锁设定了一套规则，保证多个线程读的效率和有写入操作时的线程安全。其中实现了两个锁，一个是读锁，另外一个是写锁。读锁是共享锁，能被多个线程同时持有，但是只能读取数据而不能写数据；写锁既可以读取数据也可以写数据，但是只能被一个线程持有。</p><p>合适地使用读写锁可以让程序的效率提升，如该锁就适合读多写少的场景。</p><h5 id="读写锁的获取规则"><a href="#读写锁的获取规则" class="headerlink" title="读写锁的获取规则"></a>读写锁的获取规则</h5><p>如果已经有一个线程占用了读锁，此时其他线程申请读锁，可以申请成功；如果有一个线程占用了读锁，其他线程想要申请写锁，则申请写锁的线程会一直等待释放读锁，因为读写不能同时操作；如果有一个线程已经占用了写锁，此时其他的线程如果申请读锁/写锁，都必须等待之前的线程释放，因为两个操作不能同时进行。</p><p>总结：读读共享，其他都互斥。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：     演示读写锁用法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReentrantReadWriteLock reentrantReadWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock(</span><br><span class="line">            <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReentrantReadWriteLock.ReadLock readLock = reentrantReadWriteLock</span><br><span class="line">            .readLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReentrantReadWriteLock.WriteLock writeLock = reentrantReadWriteLock</span><br><span class="line">            .writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        readLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"得到读锁，正在读取"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"释放读锁"</span>);</span><br><span class="line">            readLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        writeLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"得到写锁，正在写入"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"释放写锁"</span>);</span><br><span class="line">            writeLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; read()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; read()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; write()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; write()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">Thread-<span class="number">0</span>得到读锁，正在读取</span><br><span class="line">Thread-<span class="number">1</span>得到读锁，正在读取</span><br><span class="line">Thread-<span class="number">0</span>释放读锁</span><br><span class="line">Thread-<span class="number">1</span>释放读锁</span><br><span class="line">Thread-<span class="number">2</span>得到写锁，正在写入</span><br><span class="line">Thread-<span class="number">2</span>释放写锁</span><br><span class="line">Thread-<span class="number">3</span>得到写锁，正在写入</span><br><span class="line">Thread-<span class="number">3</span>释放写锁</span><br></pre></td></tr></table></figure><h5 id="读锁插队策略"><a href="#读锁插队策略" class="headerlink" title="读锁插队策略"></a>读锁插队策略</h5><p>可以对读写锁设置为是否为公平锁。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 公平锁</span></span><br><span class="line">ReentrantReadWriteLock reentrantReadWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 非公平锁</span></span><br><span class="line">ReentrantReadWriteLock reentrantReadWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>获取读锁之前，线程会检查readerShouldBlock()方法，同样在获取写锁之前，线程会检查writerShouldBlock()方法，来决定是否需要插队或者是去排队。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 公平锁对两个方法的实现</span></span><br><span class="line"><span class="comment">// 只要hasQueuedPredecessors返回为true，就是队列中有其他线程等待，就会Block，即不允许排队</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">writerShouldBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hasQueuedPredecessors();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">readerShouldBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hasQueuedPredecessors();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 非公平锁对两个方法的实现</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">writerShouldBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 是允许插队的</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// writers can always barge</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">readerShouldBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> apparentlyFirstQueuedIsExclusive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设一种场景，线程1和2都已经获取到了读锁，此时有一个线程3，因为前两者占有读锁，读写不能同时进行，所以线程3进入到队列中等待读锁的释放。这时候再加入一个想要获取读锁来插队的线程4，此时有两种决策：</p><ul><li>允许插队。读锁是共享锁，让线程4直接获取到读锁。这种方法有一个问题，就是如果想要读取读锁的线程不断添加，可能导致线程3陷入饥饿状态，长时间无法得到执行</li><li>不允许排队。认为线程3已经提前等待了，虽然线程4直接插队可以提高效率，但是仍然让线程5进入等待。可以避免饥饿状态的发生。</li></ul><p>故而，即使是非公平锁，只要等待队列的头节点是尝试获取写锁的线程，那么读锁是不能插的，就是为了避免饥饿状态。</p><p>策略的实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：     演示读锁不插队</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadLockJumpQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReentrantReadWriteLock reentrantReadWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReentrantReadWriteLock.ReadLock readLock = reentrantReadWriteLock</span><br><span class="line">            .readLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReentrantReadWriteLock.WriteLock writeLock = reentrantReadWriteLock</span><br><span class="line">            .writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        readLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"得到读锁，正在读取"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"释放读锁"</span>);</span><br><span class="line">            readLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        writeLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"得到写锁，正在写入"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"释放写锁"</span>);</span><br><span class="line">            writeLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; read(),<span class="string">"Thread-2"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; read(),<span class="string">"Thread-4"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; write(),<span class="string">"Thread-3"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; read(),<span class="string">"Thread-5"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">Thread-<span class="number">2</span>得到读锁，正在读取</span><br><span class="line">Thread-<span class="number">4</span>得到读锁，正在读取</span><br><span class="line">Thread-<span class="number">2</span>释放读锁</span><br><span class="line">Thread-<span class="number">4</span>释放读锁</span><br><span class="line">Thread-<span class="number">3</span>得到写锁，正在写入</span><br><span class="line">Thread-<span class="number">3</span>释放写锁</span><br><span class="line">Thread-<span class="number">5</span>得到读锁，正在读取</span><br><span class="line">Thread-<span class="number">5</span>释放读锁</span><br></pre></td></tr></table></figure><h5 id="锁的升降级"><a href="#锁的升降级" class="headerlink" title="锁的升降级"></a>锁的升降级</h5><p>锁的降级，就是从写锁降级到读锁。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新缓存的时候，如何利用锁的降级功能，其中并没有从头到尾都使用写锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachedData</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    Object data;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> cacheValid;</span><br><span class="line">    <span class="keyword">final</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">processCachedData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rwl.readLock().lock();</span><br><span class="line">        <span class="keyword">if</span> (!cacheValid) &#123;<span class="comment">// 判断缓存是否失效</span></span><br><span class="line">            <span class="comment">//在获取写锁之前，必须首先释放读锁。</span></span><br><span class="line">            rwl.readLock().unlock();</span><br><span class="line">            <span class="comment">// 更新缓存需要写锁</span></span><br><span class="line">            rwl.writeLock().lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//这里需要再次判断数据的有效性,因为在我们释放读锁和获取写锁的空隙之内，可能有其他线程修改了数据。</span></span><br><span class="line">                <span class="keyword">if</span> (!cacheValid) &#123;</span><br><span class="line">                    data = <span class="keyword">new</span> Object();</span><br><span class="line">                    cacheValid = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//在不释放写锁的情况下，直接获取读锁，这就是读写锁的降级。</span></span><br><span class="line">                rwl.readLock().lock();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//释放了写锁，但是依然持有读锁</span></span><br><span class="line">                rwl.writeLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(data);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放读锁</span></span><br><span class="line">            rwl.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>锁的降级是支持的，但是升级是不支持的，如运行以下的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    upgrade();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">upgrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rwl.readLock().lock();</span><br><span class="line">    System.out.println(<span class="string">"获取到了读锁"</span>);</span><br><span class="line">    rwl.writeLock().lock();</span><br><span class="line">    System.out.println(<span class="string">"成功升级"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>锁的升级，就是读锁升级为写锁。会使得线程直接阻塞，因为ReentrantReadWriteLock不支持读锁升级到写锁。</p><p><strong>不支持锁的升级的原因</strong></p><p>因为读锁和写锁同时持有的情况不能发生，所以升级写锁的过程中，需要所有的读锁都释放。但是读写锁的升级并不是不可能的，也有可以实现的方案，就是保证每次只有一个线程可以升级，就可以保证线程安全。只不过最常见的ReentrantReadWriteLock对此并不支持。</p><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>自旋可以理解为自我旋转，旋转也是循环的意思，指的是自己不断循环直到目标完成，而不是获取不到锁之后直接进入到阻塞状态。</p><p>如果是非自旋锁，如果获取不到锁，就会切换状态，让CPU做其他的事情，直到锁被释放之后CPU再恢复之前说的线程再次进行尝试。</p><h4 id="自旋锁的好处"><a href="#自旋锁的好处" class="headerlink" title="自旋锁的好处"></a>自旋锁的好处</h4><p>阻塞和唤醒线程都是需要高昂的开销，如果同步代码块中的内容并不复杂，那么上下文切换带来的开销可能比业务代码执行的开销还要大。适当的自旋可以避免上下文切换的开销，提升了效率。</p><h4 id="AtomicLong的实现"><a href="#AtomicLong的实现" class="headerlink" title="AtomicLong的实现"></a>AtomicLong的实现</h4><p>java.util.concurrent包中的原子类基本都是自旋锁的实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AtomicLong的实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddLong(<span class="keyword">this</span>, valueOffset, <span class="number">1L</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用的getAndAddLong方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getAndAddLong</span> <span class="params">(Object var1,<span class="keyword">long</span> var2, <span class="keyword">long</span> var4)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> var6;</span><br><span class="line">    <span class="comment">// 自旋操作，不断循环</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var6 = <span class="keyword">this</span>.getLongVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span> (!<span class="keyword">this</span>.compareAndSwapLong(var1, var2, var6, var6 + var4));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自己实现一个可重入的自旋锁"><a href="#自己实现一个可重入的自旋锁" class="headerlink" title="自己实现一个可重入的自旋锁"></a>自己实现一个可重入的自旋锁</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson27;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：     实现一个可重入的自旋锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantSpinLock</span>  </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> AtomicReference&lt;Thread&gt; owner = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//重入次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"> <span class="comment">// 加锁操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 比较当前的线程和获取到锁的线程是否相同，不同就自旋</span></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        <span class="keyword">if</span> (t == owner.get()) &#123;</span><br><span class="line">            ++count;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//自旋获取锁</span></span><br><span class="line">        <span class="keyword">while</span> (!owner.compareAndSet(<span class="keyword">null</span>, t)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"自旋了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">// 释放锁操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        <span class="comment">//只有持有锁的线程才能解锁</span></span><br><span class="line">        <span class="keyword">if</span> (t == owner.get()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                --count;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//此处无需CAS操作，因为没有竞争，因为只有线程持有者才能解锁</span></span><br><span class="line">                owner.set(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">// 主程序测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReentrantSpinLock spinLock = <span class="keyword">new</span> ReentrantSpinLock();</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"开始尝试获取自旋锁"</span>);</span><br><span class="line">                spinLock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"获取到了自旋锁"</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    spinLock.unlock();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"释放了了自旋锁"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line">...</span><br><span class="line">自旋了</span><br><span class="line">自旋了</span><br><span class="line">自旋了</span><br><span class="line">自旋了</span><br><span class="line">自旋了</span><br><span class="line">自旋了</span><br><span class="line">自旋了</span><br><span class="line">自旋了</span><br><span class="line">Thread-<span class="number">0</span>释放了了自旋锁</span><br><span class="line">Thread-<span class="number">1</span>获取到了自旋锁</span><br></pre></td></tr></table></figure><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>最大的缺点就在于虽然避免了线程切换说的开销，但是带来了新的开销。因为需要不断循环去尝试获取到锁，如果锁一直不被释放，那么随着时间的增加，浪费的CPU资源就会越来越多。</p><h4 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h4><p>适合并发度不是特别高的场景，以及临界区比较短小的情况，这样可以避免线程切换带来的效率。如果临界区很大，线程一旦拿到锁，需要长时间才会释放的话，自旋锁对于CPU的资源的浪费就比较大了。</p><h3 id="JVM对锁的优化"><a href="#JVM对锁的优化" class="headerlink" title="JVM对锁的优化"></a>JVM对锁的优化</h3><p>JDK1.6中HotSpot虚拟机对synchronized内置锁的性能进行了很多的优化，使得其的性能大幅度提升。</p><h4 id="自适应的自旋锁"><a href="#自适应的自旋锁" class="headerlink" title="自适应的自旋锁"></a>自适应的自旋锁</h4><p>自旋的缺点在于如果自旋的时间太长，性能开销是比较大的。所以JDK1.6引入了自适应，意味着自旋的时间不再固定，而是根据最近自旋尝试的成功率，以及当前锁拥有者的状态等多种因素来共同决定。比如如果最近的自旋失败了，可能会减少无用的自旋来减少开销。</p><h4 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h4><p>如果某些对象不可能被其他线程访问到，就可以当成为栈上数据，又因为栈上数据只有本线程可以访问，所以就不需要为了线程安全的原因而加锁，可以将锁给去除。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> StringBuffer <span class="title">append</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    toStringCache = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">super</span>.append(String.valueOf(obj));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示，如果编译器判断出对象只会在一个线程内被使用，就会消除synchronized，省去加锁和解锁的操作。</p><h4 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockCoarsening</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不断重复地加锁释放锁，可以将synchronized合并成一个比较大的同步块，这样就可以不用重复的加锁和解锁的操作。但是不适合循环的场景，因为在循环的时间太长，会导致其他线程长时间无法获取到锁。</p><h4 id="偏向锁-轻量级锁-重量级锁-1"><a href="#偏向锁-轻量级锁-重量级锁-1" class="headerlink" title="偏向锁/轻量级锁/重量级锁"></a>偏向锁/轻量级锁/重量级锁</h4><p>如之前已经介绍过的一般。</p><blockquote><p>锁的升级路径：无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt;重量级锁</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java并发编程之一：并发锁&quot;&gt;&lt;a href=&quot;#Java并发编程之一：并发锁&quot; class=&quot;headerlink&quot; title=&quot;Java并发编程之一：并发锁&quot;&gt;&lt;/a&gt;Java并发编程之一：并发锁&lt;/h2&gt;&lt;h3 id=&quot;锁的分类标准和简介&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="concurrent" scheme="http://yoursite.com/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>协议森林</title>
    <link href="http://yoursite.com/2020/08/04/%E5%8D%8F%E8%AE%AE%E6%A3%AE%E6%9E%97/"/>
    <id>http://yoursite.com/2020/08/04/%E5%8D%8F%E8%AE%AE%E6%A3%AE%E6%9E%97/</id>
    <published>2020-08-04T03:35:55.000Z</published>
    <updated>2020-08-04T03:37:36.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="协议森林简介"><a href="#协议森林简介" class="headerlink" title="协议森林简介"></a>协议森林简介</h2><h4 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h4><ul><li>一开始基本是文档的浏览，不需要记录某段时间浏览了什么文档</li><li>交互式web应用的兴起，需要管理会话<ul><li>记住哪些人登录系统/往购物车中放商品，即区分出每个人</li><li>发一个会话标识（session id），随机字符串，发起http请求时，将字符串发送至服务器</li><li>但是服务器保存所有人的session id是一个巨大的开销<ul><li>使用集群的话，session在哪个服务器上存储也是个问题</li><li>有人提出及那个session id集中存储一个地方，但是增加了单点失败的可能<br>如果负责session的机器挂了，所有人需要重新登录一次</li><li>也尝试将单点的机器弄出集群</li></ul></li><li>提出思考，为什么服务器端要保存session，而不是用户端<ul><li><strong>关键在于验证session id是自己生成的</strong></li></ul></li><li>设计<ul><li>登录系统后，向其发送一个令牌（token）<ul><li>为了保密，使用算法，加上自己才知道的密钥，对数据做一个签名，把签名和数据一起作为token</li><li>但是服务器本身并不保存token</li></ul></li><li>下次访问直接将token通过Http header传送<ul><li>使用同样的密钥和算法计算一次签名，和token中的签名作比较</li><li>如果相同，可以直接获取其userId</li><li>如果不同，已经被篡改</li></ul></li><li>token中的数据是明文保存的<ul><li>故而不能保存敏感数据</li></ul></li><li>只是生成token，验证token，而不是保存session id</li></ul></li></ul></li></ul><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><ul><li>指的是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能</li><li>服务器生成，发给浏览器</li><li>浏览器保存目录下文件中，下一次请求该网站将cookie发送服务器</li></ul><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><ul><li>名为会话<ul><li>服务器要识别出当前发送请求者的身份<ul><li>故而给每个客户端分配不同的身份标识（session id）</li><li>客户端发送请求给服务器都要带上</li></ul></li></ul></li><li>一般使用Cookie的方式保存Session</li><li>在服务器上<ul><li>使用session临时存储用户信息<br>用户离开后session销毁</li><li>如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。</li></ul></li></ul><h4 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h4><ul><li>起源<ul><li>基于服务器的验证<ul><li>服务器存储Session实现</li><li>逐渐暴露出问题</li></ul></li><li>基于服务器验证方式暴露的一些问题<ul><li>Seesion<ul><li>服务器存储Session的开销大</li></ul></li><li>可扩展性<ul><li>使用Session存储，带来可拓展性问题</li></ul></li><li>CORS(跨域资源共享)<ul><li>数据跨多个移动设备上运行，资源共享会是个问题</li></ul></li><li>CSRF(跨站请求伪造)<ul><li>访问银行网站，容易受到跨站请求伪造的攻击</li></ul></li></ul></li><li>基于Token的验证原理<ul><li>基于Token的身份验证是无状态的，我们不将用户信息存在服务器或Session中<ul><li>故而解决了很多问题</li></ul></li><li>验证过程如下<ul><li>用户通过用户名和密码发送请求。</li><li>程序验证。</li><li>程序返回一个签名的token给客户端。</li><li>客户端储存token,并且每次用于每次发送请求。</li><li>服务端验证token并返回数据。</li></ul></li><li>实现思路<ul><li>用户登录校验，校验成功后就返回Token给客户端。</li><li>客户端收到数据后保存在客户端</li><li>客户端每次访问API是携带Token到服务器端。</li><li>服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码</li></ul></li></ul></li></ul></li><li>优点<ul><li>无状态、可扩展</li><li>安全性</li><li>可拓展性<ul><li>Tokens能够创建与其它程序共享权限的程序</li></ul></li><li>多平台跨域</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;协议森林简介&quot;&gt;&lt;a href=&quot;#协议森林简介&quot; class=&quot;headerlink&quot; title=&quot;协议森林简介&quot;&gt;&lt;/a&gt;协议森林简介&lt;/h2&gt;&lt;h4 id=&quot;发展历史&quot;&gt;&lt;a href=&quot;#发展历史&quot; class=&quot;headerlink&quot; title=&quot;发
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="net" scheme="http://yoursite.com/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础简介</title>
    <link href="http://yoursite.com/2020/08/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2020/08/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%AE%80%E4%BB%8B/</id>
    <published>2020-08-03T03:11:12.000Z</published>
    <updated>2020-08-03T03:12:02.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库基础简介"><a href="#数据库基础简介" class="headerlink" title="数据库基础简介"></a>数据库基础简介</h2><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><ul><li>innoDB</li><li>MyISAM</li><li>主要区别<ul><li>i是事务安全型的，m不是</li><li>i支持行级锁定，m粒度是表级</li><li>i不支持全文索引，m支持全文</li><li>m相对简单，效率比i更好，小型比较合适</li></ul></li><li>应用场景<ul><li>m管理非事务表，提供高速存储和检索，以及全文索引，如果需要大量的select，m更合适</li><li>i用于事务处理应用程序，支持ACID，如果需要大量的insert和update，使用i，能提高多用户并发操作的性能</li></ul></li></ul><h3 id="数据库调优"><a href="#数据库调优" class="headerlink" title="数据库调优"></a>数据库调优</h3><ul><li><p>sql优化</p><ul><li><p>SQL语句和索引的优化</p><ul><li><p>查询优化，避免全表扫描，在where/order by涉及的列上添加索引</p><p>但是索引并不是越多越好，消耗也很大（内存和时间）</p><ul><li>避免where子句中使用!=或者&lt;&gt;操作符，否则会放弃索引</li><li>避免where中对字段进行null值判断，否则放弃索引<br>可以使用默认值为数据来进行判断</li><li>like语句要谨慎，两端都使用%会放弃索引</li><li>避免where中对字段进行运算，会放弃索引</li><li>避免where中对字段进行函数操作，会放弃索引</li><li>复合索引必须保证第一个字段作为条件时，系统能正常使用</li><li><strong>当索引列有大量重复的数据时，SQL查询可能不会利用索引</strong><br>如sex字段</li><li>数值类型涉及为字符型会减慢速度</li></ul></li><li><p>in/not in谨慎使用</p><ul><li>可以使用between等进行代替</li></ul></li><li><p>避免在字段上进行计算操作</p></li><li><p>避免频繁创建数据表</p></li><li><p>拆分大的insert/update操作，提高并发性能</p></li></ul></li><li><p>数据库表结构的优化</p><ul><li>尽量不要使用DOUBLE</li><li>尽量不要使用TEXT</li><li>尽量使用TIMESTAMP<br>空间只要datetime的一般</li></ul></li></ul></li><li><p>类型和区别</p><ul><li>关系型数据库和非关系型数据库</li><li><a href="https://blog.csdn.net/aaronthon/article/details/81714528" target="_blank" rel="noopener">https://blog.csdn.net/aaronthon/article/details/81714528</a></li></ul></li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul><li><strong>B+树</strong><ul><li>内节点只存放key，只有叶子节点存放数据</li></ul></li><li>分类<ul><li>组合索引<ul><li>多个字段建立到一个索引中，列值得组合必须唯一</li></ul></li><li>聚集索引<ul><li>数据行得物理顺序与列值（一般是主键懂得那一列）的逻辑顺序相同，一个表中只能有一个该索引</li></ul></li><li>非聚集索引<ul><li>唯一索引<ul><li>不可以有相同的值，可以为null</li></ul></li><li>普通索引<ul><li>允许出现相同的索引内容</li></ul></li><li>主键索引<ul><li>不允许出现相同的值</li></ul></li><li>全文索引<ul><li>针对值中的某个单词，但是效率低</li></ul></li></ul></li></ul></li><li>特点<ul><li>加速检索</li><li>只能创建在表上，不能创建在视图上</li><li>可以直接创建/间接创建</li><li>一个表上，一次只能使用一个索引</li></ul></li><li>优点<ul><li>唯一性索引，保证数据唯一性</li><li>加快数据检索速度</li><li>加速数据库表之间的连接</li><li>可以在查询中使用优化隐藏器，提高系统性能</li></ul></li><li>缺点<ul><li>增加、删除修改的时候，索引也需要维护，降低速度</li><li>创建和维护索引消耗时间</li><li>索引占据物理空间</li></ul></li><li>使用情况<ul><li>order by/group by/distinct</li><li>查询的字段上，建立索引</li><li>经常做表连接的属性上，建立索引</li></ul></li></ul><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul><li><p>特性（ACID）</p><ul><li>原子性（Atomicity）<ul><li>事务里的操作要么全部做完，要么全部都不做<br>只要有一个失败，全部回滚</li></ul></li><li>一致性（Consistency）<ul><li>从一个一致性状态到另外一个一致性状态，即事务对数据完整性约束的遵循<br>如a+b=2，如果a变化，b也要做出相应的变化</li></ul></li><li>隔离性（Isolation）<ul><li>事务所作的修改在最终提交以前，对其他事务不可见</li></ul></li><li>持久性（Durability）<ul><li>一旦事务提交后，修改会永久保存在数据库中</li></ul></li></ul></li><li><p>事务隔离级别（恶果：脏读、幻读、不可重复读）</p><p><img src="https://img.mubu.com/document_image/a7e56772-953e-4e2e-89d5-f872b814a539-1033611.jpg" alt="img"></p><ul><li>READ UNCOMMITTED（未提交读）<ul><li>事务中的修改，即使没有提交，对于其他的事务也是可见的</li><li><strong>事务读取未提交的数据，称作脏读</strong></li><li>会导致很多问题，而且性能相比也没有优势，所以很少使用</li></ul></li><li>READ COMMITTED（提交读）<ul><li>大多书的默认隔离级别都是提交读（MySQL不是）</li><li><strong>一个事务从开始到提交之前，做的修改对其他的事务都是不可见的，有时也称作不可重复读</strong><br>因为两次执行同样的查询，可能会得到不一样的结果</li></ul></li><li>REPEATABLE READ（可重复读）<ul><li>解决了脏读的问题，保证了同一个事务多次读取同样的数据的结果是一致的</li><li>但是无法解决幻读的问题<ul><li><strong>幻读，值得是某个事务再读取某个范围内的记录时，另外一个事务在该范围内插入了新的数据，当之前的事务再次读取该范围的记录时，会产生幻行</strong></li></ul></li><li>InnoDB和XtraDB通过多版本并发控制解决了幻读的问题</li><li>该为MySQL默认事务隔离级别</li></ul></li><li>SERIALIZABLE（可串行化）<ul><li>最高的隔离机制，通过强制事务单位串行执行，解决了幻读的问题</li><li><strong>在读取的每一行数据上加锁，可能导致大量的超时和锁争用问题</strong></li><li>很少使用，非常需要数据一致性和可以接受无并发情况下</li></ul></li></ul></li></ul><h3 id="五种连接"><a href="#五种连接" class="headerlink" title="五种连接"></a>五种连接</h3><ul><li><p>left join</p><ul><li>返回左表中的所有记录和右表中连结字段相等的记录</li></ul></li><li><p>right join</p><ul><li>返回右表中的所有记录和左表中连结字段相等的记录</li></ul></li><li><p>inner join</p><ul><li>只返回两个表中连结字段相等的行</li></ul></li><li><p>full join …on…</p><p>全外连接</p><ul><li>就是左连接和右连接的一个合集</li></ul></li><li><p>cross join</p><p>交叉连接，也称作为笛卡尔积</p><ul><li>查询返回结果的行数等于两个表行数的乘积<br>select *from table a cross join table2 b相当于select *from table1,table2；</li></ul></li></ul><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><ul><li>工作原理<ul><li>连接池的建立<ul><li>系统初始化根据系统配置建立，并且创建了几个连接对象</li><li>其中的连接不能随意创建和关闭</li><li>Java中的Vector、Stock等可以创建连接池</li></ul></li><li>连接池中连接的使用管理<ul><li><strong>核心是连接池管理策略</strong><ul><li>请求时查看是否有空闲连接<ul><li>存在，分配给客户使用</li><li>不存在，检查是否达到最大连接数<ul><li>没达到就重新创建一个连接</li><li>到达按照最大等待时间进行等待<ul><li>超出时间抛出异常</li></ul></li></ul></li></ul></li><li>释放连接<ul><li>判断连接引用次数是否超过规定值<ul><li>超过删除</li><li>没超过保留为其他客户服务</li></ul></li></ul></li></ul></li><li>避免了频繁地创建和释放带来的系统资源开销</li></ul></li><li>连接池的关闭<ul><li>关系所有连接</li><li>释放所有资源</li></ul></li></ul></li></ul><h3 id="MySQL行级锁和表级锁"><a href="#MySQL行级锁和表级锁" class="headerlink" title="MySQL行级锁和表级锁"></a>MySQL行级锁和表级锁</h3><ul><li>不同的引擎支持不同的锁</li><li>种类<ul><li>表级锁<ul><li>开销小，速度快</li><li>不会出现死锁（一次性获得sql所需的所有锁）</li><li>锁定粒度大，发生锁冲突的概率最高，并发度最低</li></ul></li><li>行级锁<ul><li>开销大，加锁慢</li><li>会出现死锁</li><li>锁定粒度最小，发生锁冲突的概率最低，并发度也最高</li></ul></li><li>适用场景<ul><li>表级锁并发度不高，适合查询为主</li><li>行级锁适合高并发，对事务完整性要求较高的系统</li></ul></li></ul></li></ul><h3 id="数据库锁"><a href="#数据库锁" class="headerlink" title="数据库锁"></a>数据库锁</h3><ul><li><p>封锁</p><p>控制并发</p><ul><li>排他锁（Exclusiive locks，简称X锁）<ul><li>只允许特定的事务T读取和修改数据对象A</li><li>其他的事务都不能向该数据对象添加锁</li></ul></li><li>共享锁（Share locks，简称S锁）<ul><li>如果添加，只允许事务T读取，但是不能修改</li><li>其他事务只能添加S锁，而不能添加X锁<br>其他事务同时可以读取数据对象</li></ul></li></ul></li><li><p>封锁协议（解决脏读、不可重复读）——待添加</p><ul><li>一级封锁协议</li><li>二级封锁协议</li><li>三级封锁协议</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库基础简介&quot;&gt;&lt;a href=&quot;#数据库基础简介&quot; class=&quot;headerlink&quot; title=&quot;数据库基础简介&quot;&gt;&lt;/a&gt;数据库基础简介&lt;/h2&gt;&lt;h3 id=&quot;存储引擎&quot;&gt;&lt;a href=&quot;#存储引擎&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="data base" scheme="http://yoursite.com/tags/data-base/"/>
    
  </entry>
  
  <entry>
    <title>分布式架构演变</title>
    <link href="http://yoursite.com/2020/07/31/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98/"/>
    <id>http://yoursite.com/2020/07/31/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98/</id>
    <published>2020-07-31T06:48:17.000Z</published>
    <updated>2020-07-31T07:20:35.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式架构演变"><a href="#分布式架构演变" class="headerlink" title="分布式架构演变"></a>分布式架构演变</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>是建立在网络上的软件系统</li><li>一组独立的计算机展现给用户的是一个统一的整体，就好像是一个系统一样</li><li>分布式架构的应用<ul><li>分布式文件系统<ul><li>Hadoop:HDFS，Google的GFS，淘宝的TFS</li></ul></li><li>分布式缓存系统<ul><li>memcache，hbase，mongdb</li></ul></li><li>分布式数据库<ul><li>MySQL，Mariadb，PostgreSQL </li></ul></li><li>分布式WebService</li><li>分布式计算</li></ul></li></ul><h3 id="演进过程"><a href="#演进过程" class="headerlink" title="演进过程"></a>演进过程</h3><ul><li>关注点<ul><li>数据量提升</li><li>访问量提升</li><li>网站结构变化</li></ul></li></ul><h4 id="阶段1——单应用结构"><a href="#阶段1——单应用结构" class="headerlink" title="阶段1——单应用结构"></a>阶段1——单应用结构</h4><ul><li><p>所有程序和应用都部署在一个机器上</p><img src="https://i.loli.net/2020/07/31/tZc8iHSqN49FbEy.png" alt="a6868517-4d99-4e56-b292-95ce425d2b6f-1033611.jpg" style="zoom:33%;" /></li></ul><h4 id="阶段2——应用服务器和数据库服务器分离"><a href="#阶段2——应用服务器和数据库服务器分离" class="headerlink" title="阶段2——应用服务器和数据库服务器分离"></a>阶段2——应用服务器和数据库服务器分离</h4><img src="https://i.loli.net/2020/07/31/nlskur6DjNUZyYA.png" alt="4d8d9040-7445-43a3-96e8-8a9cde27f066-1033611.jpg" style="zoom:33%;" /><ul><li>访问量逐步上升，服务器负载慢慢提高</li><li>增加机器<ul><li>将web服务器和数据库服务器拆分</li></ul></li></ul><h4 id="阶段3——应用服务器集群"><a href="#阶段3——应用服务器集群" class="headerlink" title="阶段3——应用服务器集群"></a>阶段3——应用服务器集群</h4><img src="https://i.loli.net/2020/07/31/fUO1bw4V3olhCnx.png" alt="e493c855-1fb7-4c6e-9a22-4e01eeb85f11-1033611.jpg" style="zoom:33%;" /><ul><li><p>访问量上升到单个应用服务器无法满足需求</p></li><li><p>增加应用服务器集群化</p><ul><li>可以分流用户请求</li><li>服务器之间无直接交互，依赖数据库对外提供服务</li></ul></li><li><p>这个阶段以来，问题慢慢出现</p><ul><li>谁来负载均衡<ul><li>用户的请求由谁来转发到及具体的应用服务器上</li></ul></li><li>如何维护session，达到session共享说的目的</li></ul></li><li><p>此时的系统架构又会变化城如下方式</p><img src="https://i.loli.net/2020/07/31/8MDYOAx2s1Rchkg.png" alt="c8093644-19f7-47fa-9857-6de196a8d725-1033611.jpg" style="zoom:33%;" /><ul><li>其中负载均衡<ul><li>软负载</li><li>硬负载</li></ul></li></ul></li></ul><h4 id="阶段4——数据库压力变大，数据库读写分离"><a href="#阶段4——数据库压力变大，数据库读写分离" class="headerlink" title="阶段4——数据库压力变大，数据库读写分离"></a>阶段4——数据库压力变大，数据库读写分离</h4><img src="https://i.loli.net/2020/07/31/WULjuaiAThy2edO.png" alt="0ac9e18b-c1f3-4408-bb06-587b031f6e95-1033611.jpg" style="zoom:33%;" /><ul><li>虽然应用服务器的性能提升了，但是数据库的负载变大</li></ul><h5 id="方案1——增加机器"><a href="#方案1——增加机器" class="headerlink" title="方案1——增加机器"></a>方案1——增加机器</h5><ul><li>将数据库一分为2，分别负载到两个数据库服务器上</li><li>但是会导致数据库数据不统一</li><li>故而不可行</li></ul><h5 id="方案2——读写分离"><a href="#方案2——读写分离" class="headerlink" title="方案2——读写分离"></a>方案2——读写分离</h5><img src="https://i.loli.net/2020/07/31/WULjuaiAThy2edO.png" alt="0ac9e18b-c1f3-4408-bb06-587b031f6e95-1033611.jpg" style="zoom:33%;" /><ul><li>带来问题：<ul><li>主从数据库之间的数据需要同步</li><li>应用中需要根据业务进行对应数据源的选择</li></ul></li></ul><h4 id="阶段5——使用搜索缓解读库的压力"><a href="#阶段5——使用搜索缓解读库的压力" class="headerlink" title="阶段5——使用搜索缓解读库的压力"></a>阶段5——使用搜索缓解读库的压力</h4><img src="https://i.loli.net/2020/07/31/x8BvOwLYEZFeKUf.png" alt="d5ced820-ac01-4ce9-934b-a723db48aeb6-1033611.jpg" style="zoom:33%;" /><ul><li>数据库对查找的效率并不高，引入搜索殷勤</li></ul><h4 id="阶段6——引入缓存机制缓解数据库的压力"><a href="#阶段6——引入缓存机制缓解数据库的压力" class="headerlink" title="阶段6——引入缓存机制缓解数据库的压力"></a>阶段6——引入缓存机制缓解数据库的压力</h4><ul><li><p>对于热点数据没必要每次从数据库中读取</p></li><li><p>使用缓存技术，如redis、memcache作为应用层的缓存</p></li><li><p>某些场景对用户的ip访问频率做限制</p><ul><li>不适合放内存和数据库中</li><li>可以使用nosql的方式替代传统的关系型数据库</li></ul><img src="https://i.loli.net/2020/07/31/SWTf285iMALaQUq.png" alt="bfd5810a-0082-482a-9435-cbe27be42cd2-1033611.jpg" style="zoom:33%;" /></li></ul><h4 id="阶段7——数据库的水平-垂直拆分"><a href="#阶段7——数据库的水平-垂直拆分" class="headerlink" title="阶段7——数据库的水平/垂直拆分"></a>阶段7——数据库的水平/垂直拆分</h4><ul><li><p>数据库的瓶颈还是问题</p><ul><li><p>对数据进行垂直拆分和水平拆分</p><img src="https://i.loli.net/2020/07/31/VzFpqeQrmvUI5sw.png" alt="0333779b-4519-4e6a-ba0c-bd7befc764d7-1033611.jpg" style="zoom:33%;" /></li></ul></li><li><p>垂直拆分</p><ul><li>把数据库中不同业务数据拆分到不同的数据库</li></ul></li><li><p>水平拆分</p><ul><li>把同一个表中的数据拆分到两个甚至更多的数据库中，水平拆分的原因是某些业务数据量已经达到了单个数据库的瓶颈，这时可以采取将表拆分到多个数据库中</li></ul></li></ul><h4 id="阶段8——应用的拆分"><a href="#阶段8——应用的拆分" class="headerlink" title="阶段8——应用的拆分"></a>阶段8——应用的拆分</h4><ul><li><p>单个的应用的压力太大，拆分成多个子系统</p><img src="https://i.loli.net/2020/07/31/XiTyHeSnLVvm4uc.png" alt="3e20e10a-125b-4754-98b6-1dc3352dbcac-1033611.jpg" style="zoom:33%;" /></li><li><p>但是之后可能会有相同的代码，所以导致每个系统都会有用户查询访问相关操作这些相同的操作一定是要抽象出来，否则就是一个坑。所以通过走服务化路线的方式来解决。</p></li><li><p>服务拆分</p><img src="https://i.loli.net/2020/07/31/LvRK8gU7trbZaMh.png" alt="63fd89ab-692e-4742-b9cf-2aa958c7fec2-1033611.jpg" style="zoom:33%;" /><ul><li>然后各个服务之间的通信可以通过RPC方式达成</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分布式架构演变&quot;&gt;&lt;a href=&quot;#分布式架构演变&quot; class=&quot;headerlink&quot; title=&quot;分布式架构演变&quot;&gt;&lt;/a&gt;分布式架构演变&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简
      
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="distributed system" scheme="http://yoursite.com/tags/distributed-system/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程之一:线程基础</title>
    <link href="http://yoursite.com/2020/07/30/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%B8%80-%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/07/30/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8B%E4%B8%80-%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</id>
    <published>2020-07-30T02:31:27.000Z</published>
    <updated>2020-08-09T01:52:16.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java并发编程之一：线程基础"><a href="#Java并发编程之一：线程基础" class="headerlink" title="Java并发编程之一：线程基础"></a>Java并发编程之一：线程基础</h2><h3 id="并发简史和基础概念"><a href="#并发简史和基础概念" class="headerlink" title="并发简史和基础概念"></a>并发简史和基础概念</h3><p>​        在早期，计算机不包含操作系统，单个计算机只能从头到尾执行一个程序，并且该程序能够访问到计算中所有的资源，即使是之后出现的批处理操作系统，<strong>本质上还是串行地执行程序，内存中始终只有一个程序正在执行</strong>。在这种环境中，编写和执行程序非常麻烦并且效率比较低下，对于计算机资源的浪费惊人。在此情况下，操作系统被开发出，从而使得一次性执行多个计算机程序成为现实。</p><p>​        计算机中每个独立执行的程序都是一个进程，也可以理解为<strong>CPU工作时间段的集合描述</strong>。<strong>进程是资源分配的最小单位</strong>，不同进程之间的数据很难共享数据（但可以做到），进程之间不会互相影响，CPU使用<strong>时间片轮转</strong>的方式运行进程。CPU时间片分配给其他进程的行为叫做上下文切换，进程上下文切换的耗损大。</p><p>​        线程因为人们不满于进程只能逐步执行进程的子任务而提出的。线程是计算机最基础的调度单位，又被称为<strong>轻量级进程</strong>。一个线程可以包含多个线程，线程共享进程的<strong>内存地址空间</strong>，每个线程中都有程序计算器等结构。多线程在使用的时候需要制定一套同步协调机制，以防出现一个线程在针对共享的内存地址空间进行数据的操作时候，出现另一个线程对数据修改、删除的情况的<strong>安全性问题</strong>。</p><p>​        线程和进程的区别本质在于是否单独占有内存地址空间和其他系统资源（如I/O）:</p><ul><li>进程是资源分配的最小单位，线程是CPU调度的最小单位；</li><li>进程单独占有一定的内存地址空间，所以进程间存在内存隔离，数据是分开的，数据共享复杂但是同步简单，各个进程之间互不干扰；而线程共享所属进程占有的内存地址空间和资源，数据共享简单，但是同步复杂。</li><li>进程的上下文切换的<strong>开销</strong>高，线程的上下文切换开销低。进程单独占有一定的内存地址空间，进程的创建和销毁不仅需要保存寄存器和栈信息，还需要资源的分配回收以及页调度，开销较大；线程只需要保存寄存器和栈信息，开销较小。</li><li>进程单独占有一定的内存地址空间，一个进程出现问题不会影响其他进程，不影响主程序的稳定性，可靠性高；一个线程崩溃可能影响整个程序的稳定性，可靠性较低。</li></ul><blockquote><p>进程让操作系统的并发性成为了可能，而线程让进程的内部并发成为了可能。</p></blockquote><blockquote><p>CPU通过时间片分配算法来循环执行子任务，上下文切换通常是计算多个子任务的，此操作会<strong>消耗大量的 CPU 时间</strong>，所以线程数量也并不是越多越好。频繁的创建和销毁线程也是系统的巨大开销。</p></blockquote><hr><h3 id="实现线程的方式"><a href="#实现线程的方式" class="headerlink" title="实现线程的方式"></a>实现线程的方式</h3><h4 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Runnable接口定义</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用Runnable接口的方式实现线程的创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> RunnableThread.start();</span><br><span class="line">    <span class="comment">// Java 函数式编程，可以省略RunnableThread类</span></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">"Java 8 匿名内部类"</span>);</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过Runnable接口重写run()方法，将实例传送到Thread类中就可以直接实现多线程。</p><h4 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h4><p>调用start()方法后，线程才会启动，轮到CPU时间片的时候再调用run()方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用继承Thread方法实现线程的创建"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">   Thread ExtendThread = <span class="keyword">new</span> ExtendThread();</span><br><span class="line">    ExtendThread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单继承Thread类并且重写类中的run()方法。</p><p><strong>Thread类的构造方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Thread类源码</span></span><br><span class="line"><span class="comment">//init方法</span></span><br><span class="line"><span class="comment">//g:线程组，指定线程在哪个线程组下, target:执行的任务, name:线程名称，多个线程的名字是可以重复的, acc:用于初始化私有变量inheritedAccessControlContext, inheritThreadLocals为可继的的ThreadLoal</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ThreadGroup g, Runnable target, String name, </span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">long</span> stackSize, AccessControlContext acc, </span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">boolean</span> inheritThreadLocals)</span></span></span><br><span class="line"><span class="function"><span class="comment">//构造函数调用init方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(Runnable target)</span></span>&#123;</span><br><span class="line">init(<span class="keyword">null</span>, target, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用在init方法里初始化AccessControlContext类型的私有属性</span></span><br><span class="line"><span class="keyword">this</span>.inheritedAccessControlContext = </span><br><span class="line">    acc != <span class="keyword">null</span> ? acc : AccessController.getContext();</span><br><span class="line"><span class="comment">//两个对用于支持ThreadLocal的私有属性</span></span><br><span class="line">ThreadLocal.ThreadLocalMap threadlocals = <span class="keyword">null</span>;</span><br><span class="line">ThreadLocal.ThreadLocalMap inheritableThreadLocals = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//实际上大部分情况下直接调用的构造函数</span></span><br><span class="line">Thread(Runnable target);</span><br><span class="line">Thread(Runnable target, String name);</span><br></pre></td></tr></table></figure><p><strong>Thread类的几个常用方法</strong></p><ul><li>currentThread()，返回正在执行对象的引用。</li><li>start()，开始执行线程，java虚拟机调用其中重写的run()方法。</li><li>yield()，让出当前线程对处理器的占用。</li><li>sleep()，线程休眠一段指定的时间。</li><li>join()，当前线程等待另外一个线程执行完成之后再继续执行。</li></ul><p><strong>Thread类和Runnable接口的比较</strong></p><ul><li><p>类单继承，接口多实现。</p></li><li><p>接口降低线程对象和线程任务的耦合性。</p></li><li><p>如果使用线程的时候不需要使用Thread类中的其他方法，接口更显得轻量级。</p></li><li><p>线程池创建线程</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认构造方法</span></span><br><span class="line">    DefaultThreadFactory()&#123;</span><br><span class="line">        SecurityManager s = System.getSecurityManager();</span><br><span class="line">        group = (s != <span class="keyword">null</span>)?s.getThreadGroup(): <span class="comment">// 获取线程组</span></span><br><span class="line">            Thread.currentThread().getThreadGroup();</span><br><span class="line">        namePrefix = <span class="string">"pool-"</span> +</span><br><span class="line">                poolNumber.getAndIncrement() +</span><br><span class="line">                <span class="string">"-thread"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本质还是通过Thread来创建的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span></span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(group,r,namePrefix+threadNumber.getAndIncrement(),<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(t.isDaemon())</span><br><span class="line">            t.setDarmon(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(t.getPriority()!=Thread.NORM_PROORITY)</span><br><span class="line">            t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Callable创建线程"><a href="#Callable创建线程" class="headerlink" title="Callable创建线程"></a>Callable创建线程</h4><p>与Runnable类似，但是提供的方法有返回值。一般配合线程池工具ExecutorService来使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Callable接口定义</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallableTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自建函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//提交任务，用Future提交返回线程执行后的结果</span></span><br><span class="line">        Future&lt;Integer&gt; future = service.submit(<span class="keyword">new</span> CallableTask());</span><br><span class="line">    <span class="comment">//调用get方法会阻塞当前线程，直接得到结果</span></span><br><span class="line">        <span class="comment">//故而实际编码中可以设置超时时间的重载get方法</span></span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FutureTask类创建线程"><a href="#FutureTask类创建线程" class="headerlink" title="FutureTask类创建线程"></a>FutureTask类创建线程</h4><p><strong>Future接口的方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 尝试取消一个线程的执行（但不一定能执行成功）,参数代表是否要中断方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> paramBoolean)</span></span>;</span><br><span class="line">    <span class="comment">// 查看线程是否被取消</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 查看任务是否完成</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 等待任务执行结束，然后获得V类型的结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">    <span class="comment">// 同上，多了等待时间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> V <span class="title">get</span><span class="params">(<span class="keyword">long</span> paramLong, TimeUnit paramTimeUnit)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>FutureTask类</strong></p><p>FutureTask类实现<code>RunnableFuture</code>接口，<code>RunnableFuture</code>接口又继承了<code>Runnable</code>接口和<code>Future</code>接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用创建线程</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line">FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> Task());</span><br><span class="line">        executor.submit(futureTask);</span><br><span class="line">        System.out.println(futureTask.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区别：</p><ul><li><p>调用<code>submit</code>方法是没有返回值的。这里实际上是调用的<code>submit(Runnable task)</code>方法，而上面的Demo，调用的是<code>submit(Callable&lt;T&gt; task)</code>方法；</p></li><li><p>这里是使用<code>FutureTask</code>直接取<code>get</code>取值，而上面的Demo是通过<code>submit</code>方法返回的<code>Future</code>去取值。</p></li></ul><blockquote><p>在很多高并发的环境下，有可能Callable和FutureTask会创建多次。FutureTask能够在高并发环境下<strong>确保任务只执行一次</strong>。这块有兴趣的同学可以参看FutureTask源码。</p></blockquote><p><strong>FutureTask的几个状态</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * state可能的状态转变路径如下：</span></span><br><span class="line"><span class="comment">  * NEW -&gt; COMPLETING -&gt; NORMAL</span></span><br><span class="line"><span class="comment">  * NEW -&gt; COMPLETING -&gt; EXCEPTIONAL</span></span><br><span class="line"><span class="comment">  * NEW -&gt; CANCELLED</span></span><br><span class="line"><span class="comment">  * NEW -&gt; INTERRUPTING -&gt; INTERRUPTED</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NEW          = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COMPLETING   = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NORMAL       = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXCEPTIONAL  = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED    = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTING = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTED  = <span class="number">6</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="线程状态以及转换"><a href="#线程状态以及转换" class="headerlink" title="线程状态以及转换"></a>线程状态以及转换</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如Thread.State源码中所声明的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State&#123;</span><br><span class="line">    NEW,</span><br><span class="line">    RUNNABLE,</span><br><span class="line">    BLOCKED,</span><br><span class="line">    WAITING,</span><br><span class="line">    TIMED_WAITING,</span><br><span class="line">    TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程生命周期中一共有六种状态：</p><h4 id="New（新建）"><a href="#New（新建）" class="headerlink" title="New（新建）"></a>New（新建）</h4><p>​    表示线程被创建但是尚未启动的状态，使用new Thread创建一个线程的时候，如果线程没有开始运行<code>start</code>方法，也就没有运行<code>run</code>方法，那么此时的状态就是<code>New</code>。只有运行start方法后才进入到<code>Runnable</code>的状态。不可能在不进入到<code>Runnable</code>状态的前提下就进入到<code>Blocked</code>状态。</p><p>​    引申问题：</p><ul><li>是否可以反复调用一个线程的start方法？</li></ul><ul><li><p>加入一个线程执行完毕，（此时处于TERMINATED状态），再次调用这个线程的start()方法是否可行？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//START的源码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)<span class="comment">// 不等于0直接抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">    group.add(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        start0();<span class="comment">// 方法中没有对threadStatus的处理</span></span><br><span class="line">        started = <span class="keyword">true</span>;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!started)&#123;</span><br><span class="line">                group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Throwable ignore)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStartMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;&#125;);</span><br><span class="line">thread.start();<span class="comment">//第一次调用threadStatus结果为0</span></span><br><span class="line">thread.start();<span class="comment">//第二次调用threadStatus结果不为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以得到结果，两个问题的答案都是不可行，在调用一次start()之后，threadStatus的值会改变，此时再次调用start()方法会抛出IllegalThreadStateException异常。</p></li></ul><h4 id="Runnable（可运行）"><a href="#Runnable（可运行）" class="headerlink" title="Runnable（可运行）"></a>Runnable（可运行）</h4><p>​    对应操作系统线程状态中的两个情况，分别是<code>Ready</code>和<code>Running</code>，区别在于是否被分配了CPU资源。所以假如一个线程执行到一半的时候，CPU资源被分配到其他的任务，导致当前线程暂时不运行，但是状态依旧是<code>Runnable</code>，仍然可能等待重新恢复执行。</p><h4 id="Blocked（阻塞）"><a href="#Blocked（阻塞）" class="headerlink" title="Blocked（阻塞）"></a>Blocked（阻塞）</h4><p>​    <code>Runnable</code> -&gt; <code>Blocked</code> 的原因就是没有争夺到<code>monitor</code>锁，<code>Blocked</code> -&gt; <code>Runnable</code> 的原因是因为拿到了<code>monitor</code>锁，从而进入到<code>Runnable</code>状态。</p><h4 id="Waiting（等待）"><a href="#Waiting（等待）" class="headerlink" title="Waiting（等待）"></a>Waiting（等待）</h4><p>​    有三种方法可以导致线程进入到waiting状态：</p><ul><li>Object.wait()方法：使当前的线程处于等待状态直到另外一个线程唤醒，调用wait()方法钱线程必须持有对象的锁，此时是释放锁的</li><li>Thread.join()方法：当代线程执行完成，底层调用的是Object实例的wait方法</li><li>LockSupport.park()方法：如ReentrantLock，如果线程没有获取到该锁的时候就会进入到waiting状态</li></ul><blockquote><p>只有被执行<code>LockSupport.unpark()</code>方法或者是等待join的线程执行结束或者中断才可以进入到Runnable状态。其他线程如果使用<code>notify()/notifyAll()</code>唤醒会直接进入到<code>Blocked</code>状态，因为执行<code>notify()/notifyAll()</code>的前提是持有<code>monitor</code>锁，直接执行唤醒的线程结束并释放锁后，拿到锁才会进入到<code>Runnable</code>状态。</p></blockquote><blockquote><p>需要注意的是调用<code>notify()</code>方法指挥唤醒单个等待锁的线程，如果有多个线程都在等待的话并不一定能唤醒到之前调用<code>wait()</code>方法的线程。调用<code>notifyAll()</code>唤醒所有等待锁的线程之后，也不一定会把时间片马上分配给刚才放弃锁的那个线程，具体看系统的调度。</p></blockquote><blockquote><p><code>join</code>方法执行中不会释放锁，会一直等待当前线程执行完毕（转换为<code>Terminated</code>状态）</p></blockquote><h4 id="Timed-Waiting（计时等待）"><a href="#Timed-Waiting（计时等待）" class="headerlink" title="Timed Waiting（计时等待）"></a>Timed Waiting（计时等待）</h4><p>该状态会等待超时，到达时间后会被系统自动唤醒。</p><p>下面的方法会导致线程进入Timed Waiting状态：</p><ul><li>Thread.sleep(long millis)方法：睡眠指定时间</li><li>Object.wait(long timeout)方法：休眠指定时间，期间可以通过notify()/notifyAll()唤醒</li><li>Thread.join(long millis)方法：：等待当前线程最多执行millis毫秒，如果millis为0，则会一直执行</li><li>LockSupport.parkNanos(long nanos)方法：除非获得调用许可，否则禁用当前线程进行线程调度指定时间</li><li>LockSupportUntil(longdeadline)方法：同上，也是禁止线程进行调度指定时间；</li></ul><blockquote><p>执行<code>notify()/notifyAll()</code>也是和<code>Waiting</code>状态相同道理，先进入<code>Blocked</code>状态，然后拿到锁进入到<code>Runnable</code>状态。其他情况下，如超时时间到了而且能直接获取锁/join线程结束/被中断/调用了<code>LockSupport.unpark()</code>都可以直接恢复到<code>Runnable</code>状态。</p></blockquote><h4 id="Terminated（终止）"><a href="#Terminated（终止）" class="headerlink" title="Terminated（终止）"></a>Terminated（终止）</h4><p>线程执行完毕</p><h4 id="线程状态转化图"><a href="#线程状态转化图" class="headerlink" title="线程状态转化图"></a>线程状态转化图</h4><p><img src="https://firebasestorage.googleapis.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-L_5HvtIhTFW9TQlOF8e%2F-L_5TIKcBFHWPtY3OwUo%2F-L_5TJM7CvFzBq6T_50d%2F%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.png?generation=1551665550335701&alt=media" alt="线程状态转换图"></p><h4 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h4><p>目前在Java里还没有安全直接的方法来停止线程，但是Java提供了线程中断机制来处理需要中断线程的情况。</p><blockquote><p>线程中断机制是一种协作机制。需要注意，通过中断操作并不能直接终止一个线程，而是通知需要被中断的线程自行处理。</p></blockquote><p>线程中断的几个方法：</p><ul><li>Thread.interrupt()：中断线程。这里的中断线程并不会立即停止线程，而是设置线程的中断状态为true（默认是flase）；</li><li>Thread.interrupted()：测试当前线程是否被中断。线程的中断状态受这个方法的影响，意思是调用一次使线程中断状态设置为true，连续调用两次会使得这个线程的中断状态重新转为false；</li><li>Thread.isInterrupted()：测试当前线程是否被中断。与上面方法不同的是调用这个方法并不会影响线程的中断状态。</li></ul><blockquote><p>在线程中断机制里，当其他线程通知需要被中断的线程后，线程中断的状态被设置为true，但是具体被要求中断的线程要怎么处理，完全由被中断线程自己而定，可以在合适的实际处理中断请求，也可以完全不处理继续执行下去。</p></blockquote><hr><p>操作系统中的线程主要有三个状态：</p><ul><li>就绪状态（ready）：线程正在等待使用CPU，经过程序调用之后可以进入Running状态</li><li>运行状态（running）：线程正在等待使用CPU</li><li>等待状态（waiting）： 线程经过等待事件的调用或者正在等待其他资源（如I/O）</li></ul><p><img src="https://gblobscdn.gitbook.com/assets%2F-L_5HvtIhTFW9TQlOF8e%2F-L_5TIKcBFHWPtY3OwUo%2F-L_5TJM1VhwmwbNGzqwJ%2F%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.png?alt=media" alt="系统进程/线程转换图"></p><hr><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h4 id="线程池简介"><a href="#线程池简介" class="headerlink" title="线程池简介"></a>线程池简介</h4><p>使用线程池的原因是因为人们随着线程数的增加，发现需要创建一个专门的类来管理线程的使用，否则每次发布一个任务都要新建一个线程。频繁的创建和销毁线程的系统开销很大，占据太多的内存等系统资源和频繁的上下文切换，并且可能给系统的稳定性带来比较大的危害，因为每个系统中能创建的线程都有一个上限，不可能出现可以无限量创建线程的行为。</p><p><strong>使用线程池相比于手动创建线程的好处在于</strong></p><ul><li>线程池可以解决线程生命周期的系统开销问题，同时也可以加快相应速度。因为线程池中的线程是可以反复使用的，不是创建好了再执行任务，而是随时准备执行任务，取消了创建线程花费的时间，因而提升了相应的速度。</li><li>线程池可以统筹内存和CPU的使用，避免资源不当使用。线程池会根据配置和任务数量灵活地控制线程数量，不足创建，过量回收，避免<strong>线程过多导致内存溢出/线程太少导致CPU资源浪费</strong>，达到了一个平衡。</li><li>线程池可以统一管理资源，如任务队列和线程，可以统一开始和结束任务，更加易于管理和数据统计。</li></ul><h4 id="线程池内部结构"><a href="#线程池内部结构" class="headerlink" title="线程池内部结构"></a>线程池内部结构</h4><p>线程池的内部结构主要由四个部分组成：</p><pre><code>+ 线程池管理器，管理线程池的创建、销毁、添加任务等操作+ 工作线程，从任务队列中获取任务执行+ 任务队列，作为缓冲机制，将当下无法马上处理的任务放入到任务队列中，一般因为在多线程的环境中，所以需要保障线程安全，所以采用BlockingQueue来实现+ 任务，任务要求实现统一的接口，方便工作线程可以处理和执行</code></pre><h4 id="线程池参数的含义"><a href="#线程池参数的含义" class="headerlink" title="线程池参数的含义"></a>线程池参数的含义</h4><table><thead><tr><th align="center">参数名称</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">corePoolSize</td><td align="center">核心线程数</td></tr><tr><td align="center">maxPoolSize</td><td align="center">最大线程数</td></tr><tr><td align="center">keepAliveTime+时间单位</td><td align="center">空闲线程的存活时间</td></tr><tr><td align="center">ThreadFactory</td><td align="center">线程工厂，用来创建新线程</td></tr><tr><td align="center">workQueue</td><td align="center">任务队列</td></tr><tr><td align="center">Handler</td><td align="center">处理被拒绝的任务</td></tr></tbody></table><h4 id="创建线程的流程"><a href="#创建线程的流程" class="headerlink" title="创建线程的流程"></a>创建线程的流程</h4><p><a href="https://imgchr.com/i/ar8d2D" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/05/ar8d2D.png" alt="ar8d2D.png"></a></p><h5 id="corePoolSize和maxPoolSize"><a href="#corePoolSize和maxPoolSize" class="headerlink" title="corePoolSize和maxPoolSize"></a>corePoolSize和maxPoolSize</h5><p>coolPoolSize是核心线程数，初始默认为0，有新的任务提交后就会创建核心线程，如果不做特殊处理，之后的线程数量不会小于核心线程数。如果队列满了将会创建非核心线程，最多可以达到maxPoolSize的数量，当未来线程空闲，大于coolPoolSize的线程将会被回收。</p><h5 id="keepAliveTime-时间单位"><a href="#keepAliveTime-时间单位" class="headerlink" title="keepAliveTime+时间单位"></a>keepAliveTime+时间单位</h5><p>当线程数量多于核心线程数的时候，如果又没有任务可做，线程池会检测线程的keepAliveTime，超过规定时间的线程就会被销毁。可以使用setKeepAliveTime动态改变其数值。</p><h5 id="workQueue和Handler"><a href="#workQueue和Handler" class="headerlink" title="workQueue和Handler"></a>workQueue和Handler</h5><p>分别对应阻塞队列和任务拒绝策略。</p><h6 id="拒绝任务的时机"><a href="#拒绝任务的时机" class="headerlink" title="拒绝任务的时机"></a>拒绝任务的时机</h6><p>线程池将会在以下的情况拒绝提交新的任务到队列中</p><ul><li>调用shutdown等方法关闭线程池后，即使当前线程池内部仍然有线程在执行任务，提交任务也会遭受拒绝</li><li>线程池没有能力处理新提交的任务。达到最大线程池并且队列已满。</li></ul><h6 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h6><p>Java在ThreadPoolExecutor中实现了四种都实现了RejectedExecutionHandler接口的默认拒绝策略。</p><ul><li>AbortPolicy，拒绝任务直接抛出RejectedExecutionException的RuntimeException，可以放弃或者是重试等策略</li><li>DiscardPolicy，新任务提交直接被丢弃，不会有任何的通知，有着数据丢失的风险</li><li>DiscardOldestPolicy，如果线程池没有被关闭并且没有能力执行，则会丢弃任务队列中的头节点，腾出空间给新的任务，也存在一定的任务丢失风险</li><li>CallerRunPolicy，如果线程池没有被关闭并且没有能力执行，新任务提交后交给提交任务的线程执行，好处有两点（提交任务的线程取决于哪个线程执行submit方法，经常是主线程）<ul><li>新提交的任务不会丢失，不会有业务损失</li><li>提交的线程负责执行任务，执行任务又比较耗时，这段时间提交任务的线程也不会提交新的任务，减缓了任务提交的速度，相当于是给予线程池一个缓冲期</li></ul></li><li>自定义拒绝策略<ul><li>也可以通过RejectedExecutionHandler接口实现自己的拒绝策略，在接口中需要实现rejectedExecution方法，在方法中执行例如打印日志、暂存业务、重新执行等自定义的拒绝策略来满足业务上的需求</li></ul></li></ul><h4 id="六种常见线程池"><a href="#六种常见线程池" class="headerlink" title="六种常见线程池"></a>六种常见线程池</h4><h5 id="FixedThreadPool"><a href="#FixedThreadPool" class="headerlink" title="FixedThreadPool"></a>FixedThreadPool</h5><p>核心线程数和最大线程数相同，相当于是固定线程数的线程池。除了线程数量最初从0开始增加外，其他所有时候的线程数都是固定的。</p><h5 id="CachedThreadPool"><a href="#CachedThreadPool" class="headerlink" title="CachedThreadPool"></a>CachedThreadPool</h5><p>缓存线程池，特点在于线程数几乎可以无限增加，理论上可以到Integer.MAX_VALUE，即2^31-1，线程空闲时仍然可以回收。提交任务后会判断是否有空闲线程，有直接分配任务，没有就新建线程执行任务。无核心线程，如果线程池检测到一定时间内没有可执行任务，最终线程甚至可以为0。</p><h5 id="ScheduledThreadPool"><a href="#ScheduledThreadPool" class="headerlink" title="ScheduledThreadPool"></a>ScheduledThreadPool</h5><p>支持定时任务的线程池。实现的主要方法如下三种：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ScheduledExecutorService service = Executors.newScheduledThreadPool(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 指定10s后执行一次任务就结束</span></span><br><span class="line">service.sheduled(<span class="keyword">new</span> Task(),<span class="number">10</span>,TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">// 分别是第一次延迟时间和周期，周期代表第一次延时后每次延时多长时间执行一次任务</span></span><br><span class="line"><span class="comment">// 任务开始的时间为起点计算时间，时间到就执行任务，不论任务执行需要多少时间</span></span><br><span class="line">service.sheduleAtFixedRate(<span class="keyword">new</span> Task(),<span class="number">10</span>,<span class="number">10</span>,TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">// 和第二种类似，不过周期定义不同，第三种以任务结束时间为下一次循环的时间起点并开始计时</span></span><br><span class="line">service.sheduleWithFixedDelay(<span class="keyword">new</span> Task,<span class="number">10</span>,<span class="number">10</span>,TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>第二种方法示例，设置参数分别为10分钟和1小时：</p><blockquote><p> 00:00喝水，00:10喝完水，01:00喝水, 01:10喝完水, 02:00 喝水, 02:10喝完水</p></blockquote><p>第三种方法示例，相同的参数设置：</p><blockquote><p> 00:00喝水，00:10喝完水，01:10喝水, 01:20喝完水, 02:20 喝水, 02:30喝完水</p></blockquote><h5 id="SingleThreadExecutor"><a href="#SingleThreadExecutor" class="headerlink" title="SingleThreadExecutor"></a>SingleThreadExecutor</h5><p>使用唯一的线程执行任务。如果过程中发生异常，线程池会重建一个新的线程。一个线程非常适合需要按照提交顺序来依次执行任务的场景，而前几种都不能保证顺序。</p><h5 id="SingleThreadScheduledExecutor"><a href="#SingleThreadScheduledExecutor" class="headerlink" title="SingleThreadScheduledExecutor"></a>SingleThreadScheduledExecutor</h5><p>和ScheduledThreadPool类似，只是其的一个特例，不过是将内部的核心线程数设置成1。</p><h5 id="ForkJoinPool"><a href="#ForkJoinPool" class="headerlink" title="ForkJoinPool"></a>ForkJoinPool</h5><p>JDK7之后加入，主要用法和之前差不多，有两个不同之处：</p><ul><li><p>非常适合执行可以产生子任务的任务。如执行一个计算的任务，将任务拆分为多个，并行计算出结果之后结合，拆分即Fork，合并即Join，即为线程池的名称。</p></li><li><p>内部结构中，除了有一个公共的任务队列外，每个线程都有自己独立的任务队列，即双端队列deque。一旦线程的任务被Fork分裂了，线程会将子任务存入到deque中，而不是任务队列中，获取到任务的成本降低，也不会出现公共人物中争抢的情况。</p><ul><li>假设一个情况，线程有多个，线程t1分裂了几十个子任务。但是t0空闲，deque为空，为了提高效率，t0会帮助t1执行人物，即<code>work-stealing</code>。t1获取人物的逻辑是后进先出（LIFO），t0偷t1线程的人物逻辑是先进先出（FIFO）</li></ul></li></ul><blockquote><p>综上可知，ForkJoinPool非常适合递归的任务</p></blockquote><h4 id="线程池常用阻塞队列"><a href="#线程池常用阻塞队列" class="headerlink" title="线程池常用阻塞队列"></a>线程池常用阻塞队列</h4><p>不同的线程池会采取不同的阻塞队列</p><table><thead><tr><th align="center">线程池</th><th align="center">阻塞队列</th></tr></thead><tbody><tr><td align="center">FixedThreadPool</td><td align="center">LinkedBlockingQueue</td></tr><tr><td align="center">SingleThreadExecutor</td><td align="center">LinkedBlockingQueue</td></tr><tr><td align="center">CachedThreadPool</td><td align="center">SynchronousQueue</td></tr><tr><td align="center">ScheduledThreadPool</td><td align="center">DelayedWorkQueue</td></tr><tr><td align="center">SingleThreadScheduledExecutor</td><td align="center">DelayedWorkQueue</td></tr></tbody></table><p>对以上的队列进行逐一的介绍</p><h5 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h5><p>容量为Integer.MAX_VALUE，理论上是可以无限扩充的。因为FixedThreadPool的线程数量是固定的，SingleThreadExecutor也是一样，所以需要没有容量限制的阻塞队列存放队列。注意的是该阻塞队列不会放满，所以线程池指挥创建核心线程数量的线程，最大线程数就没有任何的意义。</p><h5 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h5><p>对应的线程池是理论上可以无限创建线程的CachedThreadPool，所以其实力上并不需要一个阻塞队列存储任务，因为一旦有新的任务就直接让空闲线程执行或者是创建新的线程执行。本身不存储任务，只是对任务进行转发。</p><p>使用的时候如果不希望任务被拒绝，最大线程数最好设置地比较大一些，以免发生任务数大于最大线程数时（执行拒绝策略的时候），没有办法把任务放到队列中也没有足够线程来执行任务的情况。</p><h5 id="DelayedWorkQueue"><a href="#DelayedWorkQueue" class="headerlink" title="DelayedWorkQueue"></a>DelayedWorkQueue</h5><p>对应线程池分别是ScheduledThreadPool和SingleThreadScheduledExecutor，最大的特点就是可以延迟执行任务。队列的特点是内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对人物进行排序，内部使用的数据结构是堆，这样的特点可以方便任务的执行。</p><blockquote><p>还有一种常见的阻塞队列：ArrayBlockingQueue，内部用数组实现，特点是在新建对象的时候要传入容量值，不支持扩容。所以一旦任务队列放满了任务，就会造成数据的丢失。如果使用了该队列，再加上限制最大线程数量，可以有效防止资源的耗尽。</p><p>此时的队列容量大小和maxPoolSize是一个trade-off，即此消彼长的状态。如果用更大的队列和更小的最大线程数，就可以减少上下文切换的开销，但是也会减少吞吐量；如果是IO密集型，可以使用稍小容量的队列和更大的maxPoolSize，整体的效率会更高，不过会有更多的上下文切换。</p></blockquote><h4 id="为什么不该自动创建线程池？"><a href="#为什么不该自动创建线程池？" class="headerlink" title="为什么不该自动创建线程池？"></a>为什么不该自动创建线程池？</h4><h5 id="FixedThreadPool-1"><a href="#FixedThreadPool-1" class="headerlink" title="FixedThreadPool"></a>FixedThreadPool</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads,nThreads,<span class="number">0L</span>,TimeUnit.MILLSECONDS,<span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如自动创建FixedThreadPool的构造函数的内部还是调用ThreadPoolExecutor函数，使用的队列是没有上限的LinkedBlockingQueue，如果处理任务的速度比较慢，队列中就会有大量的任务堆积，占用大量内存，最后导致OOM问题，从而影响到整个程序。</p><h5 id="SingleThreadExecutor-1"><a href="#SingleThreadExecutor-1" class="headerlink" title="SingleThreadExecutor"></a>SingleThreadExecutor</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,<span class="number">0L</span>, TimeUnit.MILLISECONDS,<span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和FixedThreadPool相同，只不过设置核心线程数和最大线程数为1，一样可能会导致OOM问题。</p><h5 id="CachedThreadPool-1"><a href="#CachedThreadPool-1" class="headerlink" title="CachedThreadPool"></a>CachedThreadPool</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,<span class="number">60L</span>, TimeUnit.SECONDS,<span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SynchronousQueue本身不存储任务，而是堆任务进行转发。可以注意到第二个参数为Integer.MAX_VALUE，即最大线程数的参数。因为CachedThreadPool本身不限制线程数量，如果任务数量特别多的时候，就会导致创建非常多的线程，可能超过系统的上线而无法创建新线程，或者导致内存资源不足。</p><h5 id="ScheduledThreadPool和SingleThreadScheduledExecutor"><a href="#ScheduledThreadPool和SingleThreadScheduledExecutor" class="headerlink" title="ScheduledThreadPool和SingleThreadScheduledExecutor"></a>ScheduledThreadPool和SingleThreadScheduledExecutor</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ScheduledThreadPool</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SingleThreadScheduledExecutor,ScheduledThreadPoolExecutor是ThreadPoolExecutor的子类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,<span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到使用的是延迟队列：DelayedWorkQueue，同时也是一个无界队列，如果存放过多的任务也可能导致OOM问题。</p><blockquote><p>故而默认的方法都存在一定的风险，应该在自己明确线程池的运行规则的情况下，手动创建，不仅仅可以选择更加合适的线程数量，也可以避免资源耗尽的风险</p></blockquote><h4 id="正确关闭线程池的姿势"><a href="#正确关闭线程池的姿势" class="headerlink" title="正确关闭线程池的姿势"></a>正确关闭线程池的姿势</h4><p>ThreadPoolExecutor中有五种关闭线程的方法</p><h5 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h5><p>可以安全地关闭一个线程池，但是并不是立刻结束，因为可能仍然有线程在执行任务，或者是队列中还有大量等待执行的任务，所以会在正在执行的任何和队列中等待执行的任务结束后才关闭线程池。期间如果有新的任务提交，会根据拒绝策略直接执行相关操作。</p><h5 id="isShutdown"><a href="#isShutdown" class="headerlink" title="isShutdown"></a>isShutdown</h5><p>返回true/false来判断线程池是否已经开始了关闭操作，即是否执行了shutdown/shutdownNow方法。注意返回为true不代表已经彻底关闭了，情况和上述的shutdown相同，只是已经开始关闭。</p><h5 id="isTerminated"><a href="#isTerminated" class="headerlink" title="isTerminated"></a>isTerminated</h5><p>检测线程是否真正的结束了，包含线程池关闭和线程池中的所有任务都执行结束。只有两种情况都满足的情况下才会返回true，否则都是false。</p><h5 id="awaitTermination"><a href="#awaitTermination" class="headerlink" title="awaitTermination"></a>awaitTermination</h5><p>本身并不是用来关闭线程池的，而是判断线程池状态的。传入参数为时间，假设传入时间为10s，那么10s的等待后，可能有以下的三种情况之一：</p><ul><li>等待期间线程池关闭且所有的任务都执行完成，即线程池已终结，返回true</li><li>等待结束后，线程池并没有结束，返回false</li><li>等待期间线程被中断，抛出InterruptedException异常</li></ul><h5 id="shutdownNow"><a href="#shutdownNow" class="headerlink" title="shutdownNow"></a>shutdownNow</h5><p>表示可以立刻关闭线程池。执行方法后会给所有线程池中的线程发送interrupt中断信号，尝试中断任务的执行，将任务队列中等待的任务转移到一个List中并返回，可以对返回的List进行一些如记录在案的补救措施。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    List&lt;Runnable&gt; tasks;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123; </span><br><span class="line">        checkShutdownAccess();</span><br><span class="line">        advanceRunState(STOP);</span><br><span class="line">        interruptWorkers();<span class="comment">// 中断线程</span></span><br><span class="line">        tasks = drainQueue();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    tryTerminate();</span><br><span class="line">    <span class="keyword">return</span> tasks;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>注意的是Java中不推荐强行停止线程的机制的限制，所以即使调用了该方法，可能被中断的线程也会不理会中断信号，导致线程不会停止。所以在自己编写的线程应该具有响应中断信号的能力。</p><h4 id="线程复用原理"><a href="#线程复用原理" class="headerlink" title="线程复用原理"></a>线程复用原理</h4><p>线程池可以把线程和任务解耦，摆脱了线程之前通过Thread创建线程时的一个线程必须对应一个任务的限制。线程池中，同一个线程可以从BlockingQueue中不断提取新任务来执行，核心原理在于线程池对Thread进行了封装，并不是执行每个人物都会创建一个新的线程，而是让线程执行一个循环任务，也就是调用任务的run方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 如果传入Runnable为空，抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>) </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">    <span class="comment">// 当前线程数是否小于核心线程数</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; </span><br><span class="line">        <span class="comment">// 是则添加一个新的线程</span></span><br><span class="line">        <span class="comment">// 第一个参数为任务，第二个参数为是否小于核心线程数的boolean数值</span></span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>)) </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 到此处说明大于等于核心线程数 或者 addWorker失败了</span></span><br><span class="line">    <span class="comment">// 检测线程池状态是否为running，是的话就将任务command放入队列中</span></span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123; </span><br><span class="line">        <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">        <span class="comment">// 不为running则代表被关闭了，移除队列中的任务，并执行拒绝策略</span></span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command)) </span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="comment">// running中，防止没有可执行线程的情况，再次检查线程数量是否为0</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>) </span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 线程池不是running状态/线程数大于等于核心线程数/队列已满</span></span><br><span class="line">    <span class="comment">// 继续创建线程，看是否达到最大线程数，已经达到就执行拒绝策略</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>)) </span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// addWorker方法会添加并启动一个Worker，即线程，Worker内部有一个Thread对象</span></span><br><span class="line"><span class="comment">// 复用逻辑实现主要在Worker类中的run方法中执行</span></span><br><span class="line"><span class="comment">// 简化之后的代码如下所示</span></span><br><span class="line">runWorker(Worker w) &#123;</span><br><span class="line">    <span class="comment">// 从队列中获取第一个任务和接下来的任务</span></span><br><span class="line">    Runnable task = w.firstTask;</span><br><span class="line">    <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 直接调用run执行任务</span></span><br><span class="line">            task.run();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            task = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="线程组和线程的优先级"><a href="#线程组和线程的优先级" class="headerlink" title="线程组和线程的优先级"></a>线程组和线程的优先级</h3><h4 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h4><p>Java中用ThreadGroup来表示线程组，可以对线程进行批量控制。每个Thread必然存在于一个ThreadGroup中，不能脱离而独立存在。执行main()方法的线程名称是main，如果创建new Thread的时候没有指定，将默认将父线程线程组设置为自己的线程组。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        Thread myThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程组名称:"</span>+                                Thread.currentThread().getThreadGroup().getName());</span><br><span class="line">            System.out.println(<span class="string">"线程名称:"</span>+                        Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line">        myThread.start();</span><br><span class="line">        System.out.println(<span class="string">"执行main方法线程名称："</span> + Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 结果输出：</p><p>1.执行main方法线程名字：main</p><p>2.testThread当前线程组名字：main</p><p>3.testThread线程名字：Thread-0</p></blockquote><h4 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h4><p>Java中的线程优先级可以指定数值为1-10，但是并非所有的系统都支持这个范围的线程有限度的制定的。Java中默认的线程优先级为5，线程的执行顺序由调度程序来决定，优先级会在被调用之前就设定好。一般情况下，优先级越高，比优先级低的线程有着更高的机会得到执行，可以通过<code>Thread</code>的<code>setPriority()</code>方法设定线程的优先级。</p><blockquote><p><strong>Java程序中对线程所设置的优先级只是给操作系统一个建议，操作系统不一定会采纳。而真正的调用顺序，是由操作系统的线程调度算法决定的</strong>。</p></blockquote><p>验证代码可以得到优先级高的并不一定就先执行，每次输出的结果可能都是不同的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="title">extend</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.run();</span><br><span class="line">            System.out.println(String.format(<span class="string">"当前执行的线程是：%s，优先级：%d"</span>, Thread.currentThread().getName(),</span><br><span class="line">Thread.currentThread().getPriority()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        IntSteam.rang(<span class="number">1</span>,<span class="number">10</span>).forEach(i -&gt; &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> T1());</span><br><span class="line">            thread.setPriority(i);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java提供一个<strong>线程调度器</strong>来监视和控制处于<strong>RUNNABLE状态</strong>的线程。线程的调度策略采用<strong>抢占式</strong>，优先级高的线程比优先级低的线程会有更大的几率优先执行。在优先级相同的情况下，按照“先到先得”的原则。每个Java程序都有一个默认的主线程，就是通过JVM启动的第一个线程main线程。还有一种线程称为<strong>守护线程（Daemon）</strong>，守护线程默认的优先级比较低。</p><blockquote><p>如果某线程是守护线程，那如果所以的非守护线程结束，这个守护线程也会自动结束。</p><p>应用场景是：当所有非守护线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。</p><p>一个线程默认是非守护线程，可以通过Thread类的setDaemon(boolean on)来设置。</p></blockquote><p>问题：线程组也是可以设置优先级的，那么如果线程和线程组的优先级不一致的时候怎么办？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">    ThreadGroup threadGroup = <span class="keyword">new</span> ThreadGroup(<span class="string">"t1"</span>);</span><br><span class="line">    threadGroup.setMaxPriority(<span class="number">6</span>);</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(threadGroup,<span class="string">"thread"</span>);</span><br><span class="line">    thread.setPriority(<span class="number">9</span>);</span><br><span class="line">    System.out.println(<span class="string">"线程组的优先级"</span>+threadGroup.getMaxPriority());</span><br><span class="line">    System.out.println(<span class="string">"线程的优先级"</span>+thread.getPriority());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，如果某个线程优先级大于线程所在<strong>线程组的最大优先级</strong>，那么该线程的优先级将会失效，取而代之的是线程组的最大优先级。如果小于线程所在组的最大优先级，那么线程的优先级不变。</p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前线程组名称</span></span><br><span class="line">Thread.currentThread().getThreadGroup().getName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制一个线程数组到一个线程组</span></span><br><span class="line">Thread[] threads = <span class="keyword">new</span> Thread[threadGroup.activeCount()];</span><br><span class="line">TheadGroup threadGroup = <span class="keyword">new</span> ThreadGroup();</span><br><span class="line">threadGroup.enumerate(threads);</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程组统一异常处理</span></span><br><span class="line"><span class="keyword">package</span> com.func.axc.threadgroup;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadGroupDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadGroup threadGroup1 = <span class="keyword">new</span> ThreadGroup(<span class="string">"group1"</span>) &#123;</span><br><span class="line">            <span class="comment">// 继承ThreadGroup并重新定义以下方法</span></span><br><span class="line">            <span class="comment">// 在线程成员抛出unchecked exception</span></span><br><span class="line">            <span class="comment">// 会执行此方法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">                System.out.println(t.getName() + <span class="string">": "</span> + e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个线程是threadGroup1的一员</span></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(threadGroup1, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 抛出unchecked异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"测试异常"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程组的数据结构"><a href="#线程组的数据结构" class="headerlink" title="线程组的数据结构"></a>线程组的数据结构</h4><p>线程组还可以包含其他的线程组，不仅仅是线程</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Thread成员变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadGroup</span> <span class="keyword">implements</span> <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadGroup parent; <span class="comment">// 父亲ThreadGroup</span></span><br><span class="line">    String name; <span class="comment">// ThreadGroupr 的名称</span></span><br><span class="line">    <span class="keyword">int</span> maxPriority; <span class="comment">// 线程最大优先级</span></span><br><span class="line">    <span class="keyword">boolean</span> destroyed; <span class="comment">// 是否被销毁</span></span><br><span class="line">    <span class="keyword">boolean</span> daemon; <span class="comment">// 是否守护线程</span></span><br><span class="line">    <span class="keyword">boolean</span> vmAllowSuspension; <span class="comment">// 是否可以中断</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nUnstartedThreads = <span class="number">0</span>; <span class="comment">// 还未启动的线程</span></span><br><span class="line">    <span class="keyword">int</span> nthreads; <span class="comment">// ThreadGroup中线程数目</span></span><br><span class="line">    Thread threads[]; <span class="comment">// ThreadGroup中的线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ngroups; <span class="comment">// 线程组数目</span></span><br><span class="line">    ThreadGroup groups[]; <span class="comment">// 线程组数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ThreadGroup</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"system"</span>;</span><br><span class="line">    <span class="keyword">this</span>.maxPriority = Thread.MAX_PRIORITY;</span><br><span class="line">    <span class="keyword">this</span>.parent = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认是以当前ThreadGroup传入作为parent  ThreadGroup，新线程组的父线程组是目前正在运行线程的线程组。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadGroup</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(Thread.currentThread().getThreadGroup(), name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadGroup</span><span class="params">(ThreadGroup parent, String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(checkParentAccess(parent), parent, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有构造函数，主要的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ThreadGroup</span><span class="params">(Void unused, ThreadGroup parent, String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.maxPriority = parent.maxPriority;</span><br><span class="line">    <span class="keyword">this</span>.daemon = parent.daemon;</span><br><span class="line">    <span class="keyword">this</span>.vmAllowSuspension = parent.vmAllowSuspension;</span><br><span class="line">    <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    parent.add(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被调用的checkParentAccess方法的源码</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Void <span class="title">checkParentAccess</span><span class="params">(ThreadGroup parent)</span> </span>&#123;</span><br><span class="line">    parent.checkAccess();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前运行的线程是否具有修改线程组的权限</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkAccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Java的安全管理器，可以在应用程序执行一个可能不安全或敏感的操作前确定该操作是什么，可以允许或者是拒绝该操作</span></span><br><span class="line">    SecurityManager security = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</span><br><span class="line">        security.checkAccess(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其实Thread类也有一个checkAccess()方法，不过是用来当前运行的线程是否有权限修改被调用的这个线程实例</span></span><br></pre></td></tr></table></figure><p>总而言之，线程组是一个树状结构，每个线程组下面可以有多个线程或者线程组。线程组可以起到统一控制线程的优先级和检查线程的权限的作用。</p><hr><h3 id="合适的线程数怎么选择"><a href="#合适的线程数怎么选择" class="headerlink" title="合适的线程数怎么选择"></a>合适的线程数怎么选择</h3><p>调整线程池中的线程数量的主要目的是为了充分合理地使用CPU和内存等系统资源，从而最大程度上提高程序的性能。实际的工作中，需要战队不同类型的任务选择不同的对应策略。</p><h4 id="CPU密集型任务"><a href="#CPU密集型任务" class="headerlink" title="CPU密集型任务"></a>CPU密集型任务</h4><p>如压缩、加密、计算等任务需要大量消耗CPU的资源，对于该类型的任务，最佳的线程数为CPU核心数的1到2倍。如果设置超过2倍，因为计算任务重，会占用大量的CPU资源，导致每个CPU核心工作满负荷，并且又设置了过多的线程，每个线程都会争夺CPU时间片执行自己的任务，会造成不必要的很多上下文切换，此时线程数的增加没有使得性能提升，反而是起到了相反的效果。</p><p>同时也要考虑到同一台机器上是否还有其他占用大量CPU资源的程序，平衡资源的使用。</p><h4 id="耗时IO型任务"><a href="#耗时IO型任务" class="headerlink" title="耗时IO型任务"></a>耗时IO型任务</h4><p>如数据库、文件的读写、网络通信等任务属于该类型的任务，特定是不会占用过多的CPU资源，而是IO操作比较耗时，会占用比较多的时间。对于该类任务，最大线程数一般会大于CPU核心数很多倍。如果设置过少的线程数，那么会导致CPU资源的浪费。如果设置比较多的线程数，当一部分线程正在等待IO的时候，并不需要CPU的资源，其他线程就可以利用CPU去执行任务，并互相不会影响，更充分地利用CPU资源。</p><h4 id="推荐的计算方法"><a href="#推荐的计算方法" class="headerlink" title="推荐的计算方法"></a>推荐的计算方法</h4><p>$$<br>线程数=CPU核心数*(1+平均等待时间/平均工作时间)<br>$$</p><p>《Java并发编程实战》作者推荐使用该设计方法。当平均等待时间厂的时候，线程数随之增加，即上述的耗时IO型任务。平均工作时间高的情况对应的就是CPU密集型任务。</p><p>如果执行任务类型并不是固定的，如两种混合，那么可以将最大线程数设置为核心线程数的几倍，以便应对任务突发情况，不过最好还是将任务按照类型分开，按照不同的类型使用不同的线程池来执行对应任务。</p><blockquote><p>针对不同的程序，进行实际的测试就可以得到最合适的选择</p><p>要根据实际的需要，如并发量、内存大小等因素去指定一个符合自己业务的线程池，这样才不会导致资源不足，有着合适的线程来执行任务，并在拒绝任务时有记录方便进行追踪</p></blockquote><hr><h3 id="线程之间的通信"><a href="#线程之间的通信" class="headerlink" title="线程之间的通信"></a>线程之间的通信</h3><h4 id="锁与同步"><a href="#锁与同步" class="headerlink" title="锁与同步"></a>锁与同步</h4><p>Java中，锁的对象都是基于对象的，所以又经常称作是对象锁。一个锁同一时间也只能被一个线程持有。线程之间的同步是指线程之间按照<strong>一定的顺序</strong>执行，需要通过锁来实现线程的同步。</p><p>如果没有锁执行两个线程的话，如下所示，打印的结果必然每次都不同，每个线程之间都是独立工作的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoneLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Thread A "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Thread B "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadA()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadB()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有着需求如，A先执行后再执行B，需要对象锁</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"Thread A "</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"Thread B "</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadA()).start();</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadB()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 这里在主线程里使用sleep方法睡眠了10毫秒，是为了防止线程B先得到锁。因为如果同时start，线程A和线程B都是出于就绪状态，操作系统可能会先让B运行。这样就会先输出B的内容，然后B执行完成之后自动释放锁，线程A再执行。</p></blockquote><h4 id="等待和通知机制"><a href="#等待和通知机制" class="headerlink" title="等待和通知机制"></a>等待和通知机制</h4><p>上述的锁的方式，线程是要不断去尝试获取锁的，失败了就继续不断尝试，但是浪费了系统资源，而等待/通知就是另外一种方式。Java多线程的等待/通知机制是基于<code>Object</code>类的<code>wait()</code>方法和<code>notify()</code>, <code>notifyAll()</code>方法来实现的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitAndNotify</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"ThreadA: "</span> + i);</span><br><span class="line">                        lock.notify();</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                lock.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">"ThreadB: "</span> + i);</span><br><span class="line">                        lock.notify();</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                lock.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadA()).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadB()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">ThreadA: <span class="number">0</span></span><br><span class="line">ThreadB: <span class="number">0</span></span><br><span class="line">ThreadA: <span class="number">1</span></span><br><span class="line">ThreadB: <span class="number">1</span></span><br><span class="line">ThreadA: <span class="number">2</span></span><br><span class="line">ThreadB: <span class="number">2</span></span><br><span class="line">ThreadA: <span class="number">3</span></span><br><span class="line">ThreadB: <span class="number">3</span></span><br><span class="line">ThreadA: <span class="number">4</span></span><br><span class="line">ThreadB: <span class="number">4</span></span><br></pre></td></tr></table></figure><p>在这个Demo里，线程A和线程B首先打印出自己需要的东西，然后使用<code>notify()</code>方法叫醒另一个正在等待的线程，然后自己使用<code>wait()</code>方法陷入等待并释放<code>lock</code>锁。</p><h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><p>JDK提供了一个类似于“信号量”功能的类<code>Semaphore</code>，但是此处介绍的是基于volatile的信号量通信。volitile关键字能够保证内存的可见性，如果用volitile关键字声明了一个变量，在一个线程里面改变了这个变量的值，那其它线程是立马可见更新后的数值。需要注意的是volatile变量需要进行原子操作，而++并不是一个原子操作，所以需要对其的加法操作上锁。</p><h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><p>管道是基于“管道流”的通信方式。JDK提供了<code>PipedWriter</code>、 <code>PipedReader</code>、 <code>PipedOutputStream</code>、 <code>PipedInputStream</code>。其中，前面两个是基于字符的，后面两个是基于字节流的。</p><p>示例代码基于字符</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pipe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> PipedReader reader;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ReaderThread</span><span class="params">(PipedReader reader)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.reader = reader;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"this is reader"</span>);</span><br><span class="line">            <span class="keyword">int</span> receive = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> ((receive = reader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.print((<span class="keyword">char</span>)receive);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WriterThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> PipedWriter writer;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WriterThread</span><span class="params">(PipedWriter writer)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.writer = writer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"this is writer"</span>);</span><br><span class="line">            <span class="keyword">int</span> receive = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                writer.write(<span class="string">"test"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        PipedWriter writer = <span class="keyword">new</span> PipedWriter();</span><br><span class="line">        PipedReader reader = <span class="keyword">new</span> PipedReader();</span><br><span class="line">        writer.connect(reader); <span class="comment">// 这里注意一定要连接，才能通信</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ReaderThread(reader)).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> WriterThread(writer)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="keyword">this</span> is reader</span><br><span class="line"><span class="keyword">this</span> is writer</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>我们通过线程的构造函数，传入了<code>PipedWrite</code>和<code>PipedReader</code>对象。可以简单分析一下这个示例代码的执行流程：</p><ol><li>线程ReaderThread开始执行，</li><li>线程ReaderThread使用管道reader.read()进入”阻塞“，</li><li>线程WriterThread开始执行，</li><li>线程WriterThread用writer.write(“test”)往管道写入字符串，</li><li>线程WriterThread使用writer.close()结束管道写入，并执行完毕，</li><li>线程ReaderThread接受到管道输出的字符串并打印，</li><li>线程ReaderThread执行完毕。</li></ol><p>应用场景：</p><p><strong>使用管道多半与I/O流相关</strong>。当我们一个线程需要先另一个线程发送一个信息（比如字符串）或者文件等等时，就需要使用管道通信了。</p><h4 id="其他的通信方法"><a href="#其他的通信方法" class="headerlink" title="其他的通信方法"></a>其他的通信方法</h4><h5 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h5><p>join方法可以让当前线程陷入到等待状态，等到新的线程执行完成后，再继续执行当前的线程的任务。</p><h5 id="sleep方法"><a href="#sleep方法" class="headerlink" title="sleep方法"></a>sleep方法</h5><p>sleep方法让当前的线程睡眠一段时间</p><h5 id="ThreadLocal类"><a href="#ThreadLocal类" class="headerlink" title="ThreadLocal类"></a>ThreadLocal类</h5><p>其是一个本地线程副本变量工具类，内部由一个<strong>弱引用</strong>的Map维护，此处仅仅是简单的介绍。严格来说，ThreadLocal类并不属于多线程间的通信，而是让每个线程有自己”独立“的变量，线程之间互不影响。它为每个线程都创建一个<strong>副本</strong>，每个线程可以访问自己内部的副本变量。</p><p>ThreadLocal类最常用的就是set方法和get方法。示例代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> ThreadLocal&lt;String&gt; threadLocal;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(ThreadLocal&lt;String&gt; threadLocal)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.threadLocal = threadLocal;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            threadLocal.set(<span class="string">"A"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"ThreadA输出："</span> + threadLocal.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> ThreadLocal&lt;String&gt; threadLocal;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(ThreadLocal&lt;String&gt; threadLocal)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.threadLocal = threadLocal;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                threadLocal.set(<span class="string">"B"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"ThreadB输出："</span> + threadLocal.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            ThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadA(threadLocal)).start();</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadB(threadLocal)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line">ThreadA输出：A</span><br><span class="line">ThreadB输出：B</span><br></pre></td></tr></table></figure><p>可以看到，虽然两个线程使用的同一个ThreadLocal实例（通过构造方法传入），但是它们各自可以存取自己当前线程的一个值。那ThreadLocal有什么作用呢？如果只是单纯的想要线程隔离，在每个线程中声明一个私有变量就好了呀，为什么要使用ThreadLocal？如果开发者希望将类的某个静态变量（user ID或者transaction ID）与线程状态关联，则可以考虑使用ThreadLocal。</p><p>最常见的ThreadLocal使用场景为用来解决数据库连接、Session管理等。数据库连接和Session管理涉及多个复杂对象的初始化和关闭。如果在每个线程中声明一些私有变量来进行操作，那这个线程就变得不那么“轻量”了，需要频繁的创建和关闭连接。</p><h5 id="InheritableThreadLocal"><a href="#InheritableThreadLocal" class="headerlink" title="InheritableThreadLocal"></a>InheritableThreadLocal</h5><p>和ThreadLocal差不多，不同的是对于InheritableThreadLocal来说，不仅仅是当前线程可以存取副本值，而且它的子线程也可以存取这个副本值。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>[深入浅出Java多线程]：<a href="https://redspider.gitbook.io/concurrent/" target="_blank" rel="noopener">https://redspider.gitbook.io/concurrent/</a> </li><li>《Java并发编程实践》</li><li>《Java多线程编程核心技术》</li><li>《Java并发编程核心78讲》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java并发编程之一：线程基础&quot;&gt;&lt;a href=&quot;#Java并发编程之一：线程基础&quot; class=&quot;headerlink&quot; title=&quot;Java并发编程之一：线程基础&quot;&gt;&lt;/a&gt;Java并发编程之一：线程基础&lt;/h2&gt;&lt;h3 id=&quot;并发简史和基础概念&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="concurrent" scheme="http://yoursite.com/tags/concurrent/"/>
    
  </entry>
  
</feed>
